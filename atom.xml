<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lamente</title>
  
  <subtitle>Blog</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-03T00:43:13.923Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Lamente</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python库tkinter教程</title>
    <link href="http://example.com/2021/01/03/tkinter%E5%8F%82%E8%80%83%E6%95%99%E7%A8%8B/"/>
    <id>http://example.com/2021/01/03/tkinter%E5%8F%82%E8%80%83%E6%95%99%E7%A8%8B/</id>
    <published>2021-01-02T16:14:59.043Z</published>
    <updated>2021-01-03T00:43:13.923Z</updated>
    
    <content type="html"><![CDATA[<p>Tkinter 是使用 python 进行窗口视窗设计的模块。Tkinter模块(“Tk 接口”)是Python的标准Tk GUI工具包的接口。作为 python 特定的GUI界面，是一个图像的窗口，tkinter是python 自带的，可以编辑的GUI界面，我们可以用GUI 实现很多直观的功能，比如想开发一个计算器，如果只是一个程序输入，输出窗口的话，是没用用户体验的。所有开发一个图像化的小窗口，就是必要的。<br>转载自：<a href="https://blog.csdn.net/weixin_39945679/article/details/111066862">https://blog.csdn.net/weixin_39945679/article/details/111066862</a></p><p>对于稍有GUI编程经验的人来说，Python的Tkinter界面库是非常简单的。python的GUI库非常多，选择`Tkinter，一是最为简单，二是自带库，不需下载安装，随时使用，三则是从需求出发，Python作为一种脚本语言，一种胶水语言，一般不会用它来开发复杂的桌面应用，它并不具备这方面的优势，使用Python，可以把它作为一个灵活的工具，而不是作为主要开发语言，那么在工作中，需要制作一个小工具，肯定是需要有界面的，不仅自己用，也能分享别人使用，在这种需求下，Tkinter是足够胜任的！</p><p>这篇文章主要做一个简单概述和实践编程，对于从没有接触过GUI的新手，在脑中树立一个基本的界面编程概念，同时自己也能学会如何简单的实现一些小的图形窗口功能。</p><p>对于Tkinter编程，可以用两个比喻来理解：</p><ul><li><p>第一个，作画。我们都见过美术生写生的情景，先支一个画架，放上画板，蒙上画布，构思内容，用铅笔画草图，组织结构和比例，调色板调色，最后画笔勾勒。相应的，对应到tkinter编程，那么我们的显示屏就是支起来的画架，根窗体就是画板，在tkinter中则是Toplevel，画布就是tkinter中的容器(Frame)，画板上可以放很多张画布(Convas)，tkinter中的容器中也可以放很多个容器，绘画中的构图布局则是tkinter中的布局管理器(几何管理器)，绘画的内容就是tkinter中的一个个小组件，一幅画由许多元素构成，而我们的GUI界面，就是有一个个组件拼装起来的，它们就是widget。</p></li><li><p>第二个，我们小时候都玩过积木，只要发挥创意，相同的积木可以堆出各种造型。tkinter的组件也可以看做一个个积木，形状或许不同，其本质都是一样的，就是一个积木，不管它长什么样子，它始终就是积木！所以这些小组件都有许多共性，另外，个人认为，学习界面编程，最重要的不是一开始学习每个积木的样子，不是学习每个组件怎么用，而是这些组件该怎么放。初始学习中，怎么放远远比怎么用重要的多。网上有大量的文章资料，基本全是介绍组件怎么用的，对于怎么放，也就是tkinter中的布局管理器，都是一笔带过，这对初学者有点本末倒置，或许绝大部分是转载的原因吧，极少是自己真正写的。组件怎么用不是最迫切的，用到的时候再去了解也不迟，边用边学反而更好。因此我将专门写一章，详细介绍布局管理器的使用。</p></li></ul><h2 id="一、Tkinter-控件详细介绍"><a href="#一、Tkinter-控件详细介绍" class="headerlink" title="一、Tkinter 控件详细介绍"></a>一、Tkinter 控件详细介绍</h2><p>1.Tkinter 模块元素简要说明</p><p>The Button Widget</p><p>The Canvas Widget</p><p>The Checkbutton Widget</p><p>The Entry Widget</p><p>The Frame Widget</p><p>The Label Widget</p><p>The LabelFrame Widget</p><p>The Listbox Widget</p><p>The Menu Widget</p><p>The Menubutton Widget</p><p>The Message Widget</p><p>The OptionMenu Widget</p><p>The PanedWindow Widget</p><p>The Radiobutton Widget</p><p>The Scale Widget</p><p>The Scrollbar Widget</p><p>The Spinbox Widget</p><p>The Text Widget</p><p>The Toplevel Widget</p><p>Basic Widget Methods</p><p>Toplevel Window Methods</p><h2 id="二、常用窗口部件及简要说明："><a href="#二、常用窗口部件及简要说明：" class="headerlink" title="二、常用窗口部件及简要说明："></a>二、常用窗口部件及简要说明：</h2><p><code>Tkinter</code>支持<code>16</code>个核心的窗口部件，这个<code>16</code>个核心窗口部件类简要描述如下：<code>Button</code>：一个简单的按钮，用来执行一个命令或别的操作</p><p><code>Canvas</code>：组织图形。这个部件可以用来绘制图表和图，创建图形编辑器，实现定制窗口部件。</p><p><code>Checkbutton</code>：代表一个变量，它有两个不同的值。点击这个按钮将会在这两个值间切换。</p><p><code>Entry</code>：文本输入域。</p><p><code>Frame</code>：一个容器窗口部件。帧可以有边框和背景，当创建一个应用程序或dialog(对话)版面时，帧被用来组织其它的窗口部件。</p><p><code>Label</code>：显示一个文本或图象。</p><p><code>Listbox</code>：显示供选方案的一个列表。listbox能够被配置来得到radiobutton或checklist的行为。</p><p><code>Menu</code>：菜单条。用来实现下拉和弹出式菜单。</p><p><code>Menubutton</code>：菜单按钮。用来实现下拉式菜单。</p><p><code>Message</code>：显示一文本。类似label窗口部件，但是能够自动地调整文本到给定的宽度或比率。</p><p><code>Radiobutton</code>：代表一个变量，它可以有多个值中的一个。点击它将为这个变量设置值，并且清除与这同一变量相关的其它radiobutton。</p><p><code>Scale</code>：允许你通过滑块来设置一数字值。</p><p><code>Scrollbar</code>：为配合使用canvas, entry, listbox, and text窗口部件的标准滚动条。</p><p><code>Text</code>：格式化文本显示。允许你用不同的样式和属性来显示和编辑文本。同时支持内嵌图象和窗口。</p><p><code>Toplevel</code>：一个容器窗口部件，作为一个单独的、最上面的窗口显示。</p><p><code>messageBox</code>：消息框，用于显示你应用程序的消息框。(Python2中为tkMessagebox)注意在Tkinter中窗口部件类没有分级；所有的窗口部件类在树中都是兄弟关系。</p><p>所有这些窗口部件提供了<code>Misc</code>和几何管理方法、配置管理方法和部件自己定义的另外的方法。此外，<code>Toplevel</code>类也提供窗口管理接口。这意味一个典型的窗口部件类提供了大约<code>150</code>种方法。</p><h2 id="三、动手实践学习"><a href="#三、动手实践学习" class="headerlink" title="三、动手实践学习"></a>三、动手实践学习</h2><p>1.创建主窗口及Label部件(标签)创建使用</p><p>我们要学习使用上面提到的这些控件首先要创建一个主窗口，就像作画一样，先要架好架子和画板，然后才能在上面放画纸和各种绘画元素，创建好主窗口才能在上面放置各种控件元素。而创建过程是很简单的，如下：</p><p>示例代码：[^ /usr/bin/env python]</p><h5 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h5><h5 id="author-lamente"><a href="#author-lamente" class="headerlink" title="author:lamente"></a>author:lamente</h5><p>import tkinter as tk # 使用Tkinter前需要先导入</p><h5 id="第1步，实例化object，建立窗口window"><a href="#第1步，实例化object，建立窗口window" class="headerlink" title="第1步，实例化object，建立窗口window"></a>第1步，实例化object，建立窗口window</h5><p>window = tk.Tk()</p><h5 id="第2步，给窗口的可视化起名字"><a href="#第2步，给窗口的可视化起名字" class="headerlink" title="第2步，给窗口的可视化起名字"></a>第2步，给窗口的可视化起名字</h5><p>window.title(‘My Window’)</p><h5 id="第3步，设定窗口的大小-长-宽"><a href="#第3步，设定窗口的大小-长-宽" class="headerlink" title="第3步，设定窗口的大小(长 * 宽)"></a>第3步，设定窗口的大小(长 * 宽)</h5><p>window.geometry(‘500x300’) # 这里的乘是小x</p><h5 id="第4步，在图形界面上设定标签"><a href="#第4步，在图形界面上设定标签" class="headerlink" title="第4步，在图形界面上设定标签"></a>第4步，在图形界面上设定标签</h5><p>l = tk.Label(window, text=’你好！this is Tkinter’, bg=’green’, font=(‘Arial’, 12), width=30, height=2)</p><h5 id="说明：-bg为背景，font为字体，width为长，height为高，这里的长和高是字符的长和高，比如height-2-就是标签有2个字符这么高"><a href="#说明：-bg为背景，font为字体，width为长，height为高，这里的长和高是字符的长和高，比如height-2-就是标签有2个字符这么高" class="headerlink" title="说明：[^ bg为背景，font为字体，width为长，height为高，这里的长和高是字符的长和高，比如height=2,就是标签有2个字符这么高]"></a>说明：[^ bg为背景，font为字体，width为长，height为高，这里的长和高是字符的长和高，比如height=2,就是标签有2个字符这么高]</h5><h6 id="第5步，放置标签"><a href="#第5步，放置标签" class="headerlink" title="第5步，放置标签"></a>第5步，放置标签</h6><p>l.pack() # Label内容content区域放置位置，自动调节尺寸</p><h5 id="放置lable的方法有：1-l-pack-2-l-place"><a href="#放置lable的方法有：1-l-pack-2-l-place" class="headerlink" title="放置lable的方法有：1)l.pack(); 2)l.place();"></a>放置lable的方法有：1)l.pack(); 2)l.place();</h5><h5 id="第6步，主窗口循环显示"><a href="#第6步，主窗口循环显示" class="headerlink" title="第6步，主窗口循环显示"></a>第6步，主窗口循环显示</h5><p>window.mainloop()</p><h5 id="注意，loop因为是循环的意思，window-mainloop就会让window不断的刷新，如果没有mainloop-就是一个静态的window-传入进去的值就不会有循环，mainloop就相当于一个很大的while循环，有个while，每点击一次就会更新一次，所以我们必须要有循环"><a href="#注意，loop因为是循环的意思，window-mainloop就会让window不断的刷新，如果没有mainloop-就是一个静态的window-传入进去的值就不会有循环，mainloop就相当于一个很大的while循环，有个while，每点击一次就会更新一次，所以我们必须要有循环" class="headerlink" title="注意，loop因为是循环的意思，window.mainloop就会让window不断的刷新，如果没有mainloop,就是一个静态的window,传入进去的值就不会有循环，mainloop就相当于一个很大的while循环，有个while，每点击一次就会更新一次，所以我们必须要有循环"></a>注意，loop因为是循环的意思，window.mainloop就会让window不断的刷新，如果没有mainloop,就是一个静态的window,传入进去的值就不会有循环，mainloop就相当于一个很大的while循环，有个while，每点击一次就会更新一次，所以我们必须要有循环</h5><h5 id="所有的窗口文件都必须有类似的mainloop函数，mainloop是窗口文件的关键的关键。"><a href="#所有的窗口文件都必须有类似的mainloop函数，mainloop是窗口文件的关键的关键。" class="headerlink" title="所有的窗口文件都必须有类似的mainloop函数，mainloop是窗口文件的关键的关键。"></a>所有的窗口文件都必须有类似的mainloop函数，mainloop是窗口文件的关键的关键。</h5><p>测试效果：</p><p>2.Button窗口部件</p><p>简单说明：</p><p>Button(按钮)部件是一个标准的Tkinter窗口部件，用来实现各种按钮。按钮能够包含文本或图象，并且你能够将按钮与一个Python函数或方法相关联。当这个按钮被按下时，Tkinter自动调用相关联的函数或方法。</p><p>按钮仅能显示一种字体，但是这个文本可以跨行。另外，这个文本中的一个字母可以有下划线，例如标明一个快捷键。默认情况，Tab键用于将焦点移动到一个按钮部件。</p><p>什么时候用按钮部件</p><p>简言之，按钮部件用来让用户说“马上给我执行这个任务”，通常我们用显示在按钮上的文本或图象来提示。按钮通常用在工具条中或应用程序窗口中，并且用来接收或忽略输入在对话框中的数据。关于按钮和输入的数据的配合，可以参看Checkbutton和Radiobutton部件。</p><p>如何创建：</p><p>普通的按钮很容易被创建，仅仅指定按钮的内容(文本、位图、图象)和一个当按钮被按下时的回调函数即可：</p><p>b = tk.Button(window, text=”hit me”, command=hit_me)</p><p>没有回调函数的按钮是没有用的，当你按下这个按钮时它什么也不做。你可能在开发一个应用程序的时候想实现这种按钮，比如为了不干扰你的beta版的测试者：</p><p>b = tk.Button(window, text=”Help”, command=DISABLED)</p><p>示例代码：</p><p>#!/usr/bin/env python</p><h5 id="coding-utf-8-1"><a href="#coding-utf-8-1" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h5><h5 id="author-lamente-1"><a href="#author-lamente-1" class="headerlink" title="author:lamente"></a>author:lamente</h5><p>import tkinter as tk # 使用Tkinter前需要先导入</p><h5 id="第1步，实例化object，建立窗口window-1"><a href="#第1步，实例化object，建立窗口window-1" class="headerlink" title="第1步，实例化object，建立窗口window"></a>第1步，实例化object，建立窗口window</h5><p>window = tk.Tk()</p><h5 id="第2步，给窗口的可视化起名字-1"><a href="#第2步，给窗口的可视化起名字-1" class="headerlink" title="第2步，给窗口的可视化起名字"></a>第2步，给窗口的可视化起名字</h5><p>window.title(‘My Window’)</p><h5 id="第3步，设定窗口的大小-长-宽-1"><a href="#第3步，设定窗口的大小-长-宽-1" class="headerlink" title="第3步，设定窗口的大小(长 * 宽)"></a>第3步，设定窗口的大小(长 * 宽)</h5><p>window.geometry(‘500x300’) # 这里的乘是小x</p><h5 id="第4步，在图形界面上设定标签-1"><a href="#第4步，在图形界面上设定标签-1" class="headerlink" title="第4步，在图形界面上设定标签"></a>第4步，在图形界面上设定标签</h5><p>var = tk.StringVar() # 将label标签的内容设置为字符类型，用var来接收hit_me函数的传出内容用以显示在标签上</p><p>l = tk.Label(window, textvariable=var, bg=’green’, fg=’white’, font=(‘Arial’, 12), width=30, height=2)</p><h5 id="说明：-bg为背景，fg为字体颜色，font为字体，width为长，height为高，这里的长和高是字符的长和高，比如height-2-就是标签有2个字符这么高"><a href="#说明：-bg为背景，fg为字体颜色，font为字体，width为长，height为高，这里的长和高是字符的长和高，比如height-2-就是标签有2个字符这么高" class="headerlink" title="说明： bg为背景，fg为字体颜色，font为字体，width为长，height为高，这里的长和高是字符的长和高，比如height=2,就是标签有2个字符这么高"></a>说明： bg为背景，fg为字体颜色，font为字体，width为长，height为高，这里的长和高是字符的长和高，比如height=2,就是标签有2个字符这么高</h5><p>l.pack()</p><h5 id="定义一个函数功能-内容自己自由编写-，供点击Button按键时调用，调用命令参数command-函数名"><a href="#定义一个函数功能-内容自己自由编写-，供点击Button按键时调用，调用命令参数command-函数名" class="headerlink" title="定义一个函数功能(内容自己自由编写)，供点击Button按键时调用，调用命令参数command=函数名"></a>定义一个函数功能(内容自己自由编写)，供点击Button按键时调用，调用命令参数command=函数名</h5><p>on_hit = False</p><p>def hit_me():</p><p>global on_hit</p><p>if on_hit == False:</p><p>on_hit = True</p><p>var.set(‘you hit me’)</p><p>else:</p><p>on_hit = False</p><p>var.set(‘’)</p><h5 id="第5步，在窗口界面设置放置Button按键"><a href="#第5步，在窗口界面设置放置Button按键" class="headerlink" title="第5步，在窗口界面设置放置Button按键"></a>第5步，在窗口界面设置放置Button按键</h5><p>b = tk.Button(window, text=’hit me’, font=(‘Arial’, 12), width=10, height=1, command=hit_me)</p><p>b.pack()</p><h5 id="第6步，主窗口循环显示-1"><a href="#第6步，主窗口循环显示-1" class="headerlink" title="第6步，主窗口循环显示"></a>第6步，主窗口循环显示</h5><p>window.mainloop()</p><p>测试效果：</p><ol start="3"><li>Entry窗口部件</li></ol><p>简单说明：</p><p>Entry是tkinter类中提供的的一个单行文本输入域，用来输入显示一行文本，收集键盘输入(类似 HTML 中的 text)。</p><p>什么时候用：</p><p>需要用户输入用户信息时，比如我们平时使用软件、登录网页时，用户交互界面让我们登录账户信息等时候可以用到。</p><p>示例代码：</p><p>#!/usr/bin/env python</p><h5 id="coding-utf-8-2"><a href="#coding-utf-8-2" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h5><h5 id="author-lamente-2"><a href="#author-lamente-2" class="headerlink" title="author:lamente"></a>author:lamente</h5><p>import tkinter as tk # 使用Tkinter前需要先导入</p><h5 id="第1步，实例化object，建立窗口window-2"><a href="#第1步，实例化object，建立窗口window-2" class="headerlink" title="第1步，实例化object，建立窗口window"></a>第1步，实例化object，建立窗口window</h5><p>window = tk.Tk()</p><h5 id="第2步，给窗口的可视化起名字-2"><a href="#第2步，给窗口的可视化起名字-2" class="headerlink" title="第2步，给窗口的可视化起名字"></a>第2步，给窗口的可视化起名字</h5><p>window.title(‘My Window’)</p><h5 id="第3步，设定窗口的大小-长-宽-2"><a href="#第3步，设定窗口的大小-长-宽-2" class="headerlink" title="第3步，设定窗口的大小(长 * 宽)"></a>第3步，设定窗口的大小(长 * 宽)</h5><p>window.geometry(‘500x300’) # 这里的乘是小x</p><h5 id="第4步，在图形界面上设定输入框控件entry并放置控件"><a href="#第4步，在图形界面上设定输入框控件entry并放置控件" class="headerlink" title="第4步，在图形界面上设定输入框控件entry并放置控件"></a>第4步，在图形界面上设定输入框控件entry并放置控件</h5><p>e1 = tk.Entry(window, show=’*’, font=(‘Arial’, 14)) # 显示成密文形式</p><p>e2 = tk.Entry(window, show=None, font=(‘Arial’, 14)) # 显示成明文形式</p><p>e1.pack()</p><p>e2.pack()</p><h5 id="第5步，主窗口循环显示"><a href="#第5步，主窗口循环显示" class="headerlink" title="第5步，主窗口循环显示"></a>第5步，主窗口循环显示</h5><p>window.mainloop()</p><p>4.Text窗口部件</p><p>简单说明：</p><p>Text是tkinter类中提供的的一个多行文本区域，显示多行文本，可用来收集(或显示)用户输入的文字(类似 HTML 中的 textarea)，格式化文本显示，允许你用不同的样式和属性来显示和编辑文本，同时支持内嵌图象和窗口。</p><p>什么时候用：</p><p>在需要显示编辑用户、产品多行信息时，比如显示用户详细描述文字，产品简介等等，支持随时编辑。</p><p>示例代码：</p><p>#!/usr/bin/env python</p><h5 id="coding-utf-8-3"><a href="#coding-utf-8-3" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h5><h5 id="author-lamente-3"><a href="#author-lamente-3" class="headerlink" title="author:lamente"></a>author:lamente</h5><p>import tkinter as tk # 使用Tkinter前需要先导入</p><h5 id="第1步，实例化object，建立窗口window-3"><a href="#第1步，实例化object，建立窗口window-3" class="headerlink" title="第1步，实例化object，建立窗口window"></a>第1步，实例化object，建立窗口window</h5><p>window = tk.Tk()</p><h5 id="第2步，给窗口的可视化起名字-3"><a href="#第2步，给窗口的可视化起名字-3" class="headerlink" title="第2步，给窗口的可视化起名字"></a>第2步，给窗口的可视化起名字</h5><p>window.title(‘My Window’)</p><h4 id="第3步，设定窗口的大小-长-宽-3"><a href="#第3步，设定窗口的大小-长-宽-3" class="headerlink" title="第3步，设定窗口的大小(长 * 宽)"></a>第3步，设定窗口的大小(长 * 宽)</h4><p>window.geometry(‘500x300’) # 这里的乘是小x</p><h5 id="第4步，在图形界面上设定输入框控件entry框并放置"><a href="#第4步，在图形界面上设定输入框控件entry框并放置" class="headerlink" title="第4步，在图形界面上设定输入框控件entry框并放置"></a>第4步，在图形界面上设定输入框控件entry框并放置</h5><p>e = tk.Entry(window, show = None)#显示成明文形式</p><p>e.pack()</p><h5 id="第5步，定义两个触发事件时的函数insert-point和insert-end-注意：因为Python的执行顺序是从上往下，所以函数一定要放在按钮的上面"><a href="#第5步，定义两个触发事件时的函数insert-point和insert-end-注意：因为Python的执行顺序是从上往下，所以函数一定要放在按钮的上面" class="headerlink" title="第5步，定义两个触发事件时的函数insert_point和insert_end(注意：因为Python的执行顺序是从上往下，所以函数一定要放在按钮的上面)"></a>第5步，定义两个触发事件时的函数insert_point和insert_end(注意：因为Python的执行顺序是从上往下，所以函数一定要放在按钮的上面)</h5><p>def insert_point(): # 在鼠标焦点处插入输入内容</p><p>var = e.get()</p><p>t.insert(‘insert’, var)</p><p>def insert_end(): # 在文本框内容最后接着插入输入内容</p><p>var = e.get()</p><p>t.insert(‘end’, var)</p><h5 id="第6步，创建并放置两个按钮分别触发两种情况"><a href="#第6步，创建并放置两个按钮分别触发两种情况" class="headerlink" title="第6步，创建并放置两个按钮分别触发两种情况"></a>第6步，创建并放置两个按钮分别触发两种情况</h5><p>b1 = tk.Button(window, text=’insert point’, width=10,</p><p>height=2, command=insert_point)</p><p>b1.pack()</p><p>b2 = tk.Button(window, text=’insert end’, width=10,</p><p>height=2, command=insert_end)</p><p>b2.pack()</p><h5 id="第7步，创建并放置一个多行文本框text用以显示，指定height-3为文本框是三个字符高度"><a href="#第7步，创建并放置一个多行文本框text用以显示，指定height-3为文本框是三个字符高度" class="headerlink" title="第7步，创建并放置一个多行文本框text用以显示，指定height=3为文本框是三个字符高度"></a>第7步，创建并放置一个多行文本框text用以显示，指定height=3为文本框是三个字符高度</h5><p>t = tk.Text(window, height=3)</p><p>t.pack()</p><h5 id="第8步，主窗口循环显示"><a href="#第8步，主窗口循环显示" class="headerlink" title="第8步，主窗口循环显示"></a>第8步，主窗口循环显示</h5><p>window.mainloop()</p><p>5.Listbox窗口部件</p><p>简单说明：</p><p>Text是tkinter类中提供的的列表框部件，显示供选方案的一个列表。listbox能够被配置来得到radiobutton或checklist的行为。</p><p>什么时候用：</p><p>在有一个很多内容选项组成的列表提供用户选择时会用到。</p><p>示例代码：</p><p>#!/usr/bin/env python</p><h5 id="coding-utf-8-4"><a href="#coding-utf-8-4" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h5><h5 id="author-lamente-4"><a href="#author-lamente-4" class="headerlink" title="author:lamente"></a>author:lamente</h5><p>import tkinter as tk # 使用Tkinter前需要先导入</p><h5 id="第1步，实例化object，建立窗口window-4"><a href="#第1步，实例化object，建立窗口window-4" class="headerlink" title="第1步，实例化object，建立窗口window"></a>第1步，实例化object，建立窗口window</h5><p>window = tk.Tk()</p><h5 id="第2步，给窗口的可视化起名字-4"><a href="#第2步，给窗口的可视化起名字-4" class="headerlink" title="第2步，给窗口的可视化起名字"></a>第2步，给窗口的可视化起名字</h5><p>window.title(‘My Window’)</p><h5 id="第3步，设定窗口的大小-长-宽-4"><a href="#第3步，设定窗口的大小-长-宽-4" class="headerlink" title="第3步，设定窗口的大小(长 * 宽)"></a>第3步，设定窗口的大小(长 * 宽)</h5><p>window.geometry(‘500x300’) # 这里的乘是小x</p><h5 id="第4步，在图形界面上创建一个标签label用以显示并放置"><a href="#第4步，在图形界面上创建一个标签label用以显示并放置" class="headerlink" title="第4步，在图形界面上创建一个标签label用以显示并放置"></a>第4步，在图形界面上创建一个标签label用以显示并放置</h5><p>var1 = tk.StringVar() # 创建变量，用var1用来接收鼠标点击具体选项的内容</p><p>l = tk.Label(window, bg=’green’, fg=’yellow’,font=(‘Arial’, 12), width=10, textvariable=var1)</p><p>l.pack()</p><h5 id="第6步，创建一个方法用于按钮的点击事件"><a href="#第6步，创建一个方法用于按钮的点击事件" class="headerlink" title="第6步，创建一个方法用于按钮的点击事件"></a>第6步，创建一个方法用于按钮的点击事件</h5><p>def print_selection():</p><p>value = lb.get(lb.curselection()) # 获取当前选中的文本</p><p>var1.set(value) # 为label设置值</p><h5 id="第5步，创建一个按钮并放置，点击按钮调用print-selection函数"><a href="#第5步，创建一个按钮并放置，点击按钮调用print-selection函数" class="headerlink" title="第5步，创建一个按钮并放置，点击按钮调用print_selection函数"></a>第5步，创建一个按钮并放置，点击按钮调用print_selection函数</h5><p>b1 = tk.Button(window, text=’print selection’, width=15, height=2, command=print_selection)</p><p>b1.pack()</p><h5 id="第7步，创建Listbox并为其添加内容"><a href="#第7步，创建Listbox并为其添加内容" class="headerlink" title="第7步，创建Listbox并为其添加内容"></a>第7步，创建Listbox并为其添加内容</h5><p>var2 = tk.StringVar()</p><p>var2.set((1,2,3,4)) # 为变量var2设置值</p><h4 id="创建Listbox"><a href="#创建Listbox" class="headerlink" title="创建Listbox"></a>创建Listbox</h4><p>lb = tk.Listbox(window, listvariable=var2) #将var2的值赋给Listbox</p><h5 id="创建一个list并将值循环添加到Listbox控件中"><a href="#创建一个list并将值循环添加到Listbox控件中" class="headerlink" title="创建一个list并将值循环添加到Listbox控件中"></a>创建一个list并将值循环添加到Listbox控件中</h5><p>list_items = [11,22,33,44]</p><p>for item in list_items:</p><p>lb.insert(‘end’, item) # 从最后一个位置开始加入值</p><p>lb.insert(1, ‘first’) # 在第一个位置加入’first’字符</p><p>lb.insert(2, ‘second’) # 在第二个位置加入’second’字符</p><p>lb.delete(2) # 删除第二个位置的字符</p><p>lb.pack()</p><h5 id="第8步，主窗口循环显示-1"><a href="#第8步，主窗口循环显示-1" class="headerlink" title="第8步，主窗口循环显示"></a>第8步，主窗口循环显示</h5><p>window.mainloop()</p><p>测试效果：</p><p>6.Radiobutton窗口部件</p><p>简单说明：</p><p>Radiobutton：代表一个变量，它可以有多个值中的一个。点击它将为这个变量设置值，并且清除与这同一变量相关的其它radiobutton。</p><p>什么时候用：</p><p>在有一个很多内容选项组成的选项列表提供用户选择时会用到，用户一次只能选择其中一个，不能多选。</p><p>示例代码：</p><p>#!/usr/bin/env python</p><h5 id="coding-utf-8-5"><a href="#coding-utf-8-5" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h5><h5 id="author-lamente-5"><a href="#author-lamente-5" class="headerlink" title="author:lamente"></a>author:lamente</h5><p>import tkinter as tk # 使用Tkinter前需要先导入</p><h5 id="第1步，实例化object，建立窗口window-5"><a href="#第1步，实例化object，建立窗口window-5" class="headerlink" title="第1步，实例化object，建立窗口window"></a>第1步，实例化object，建立窗口window</h5><p>window = tk.Tk()</p><h5 id="第2步，给窗口的可视化起名字-5"><a href="#第2步，给窗口的可视化起名字-5" class="headerlink" title="第2步，给窗口的可视化起名字"></a>第2步，给窗口的可视化起名字</h5><p>window.title(‘My Window’)</p><h5 id="第3步，设定窗口的大小-长-宽-5"><a href="#第3步，设定窗口的大小-长-宽-5" class="headerlink" title="第3步，设定窗口的大小(长 * 宽)"></a>第3步，设定窗口的大小(长 * 宽)</h5><p>window.geometry(‘500x300’) # 这里的乘是小x</p><h5 id="第4步，在图形界面上创建一个标签label用以显示并放置-1"><a href="#第4步，在图形界面上创建一个标签label用以显示并放置-1" class="headerlink" title="第4步，在图形界面上创建一个标签label用以显示并放置"></a>第4步，在图形界面上创建一个标签label用以显示并放置</h5><p>var = tk.StringVar() # 定义一个var用来将radiobutton的值和Label的值联系在一起.</p><p>l = tk.Label(window, bg=’yellow’, width=20, text=’empty’)</p><p>l.pack()</p><h5 id="第6步，定义选项触发函数功能"><a href="#第6步，定义选项触发函数功能" class="headerlink" title="第6步，定义选项触发函数功能"></a>第6步，定义选项触发函数功能</h5><p>def print_selection():</p><p>l.config(text=’you have selected ‘ + var.get())</p><h5 id="第5步，创建三个radiobutton选项，其中variable-var-value-’A’的意思就是，当我们鼠标选中了其中一个选项，把value的值A放到变量var中，然后赋值给variable"><a href="#第5步，创建三个radiobutton选项，其中variable-var-value-’A’的意思就是，当我们鼠标选中了其中一个选项，把value的值A放到变量var中，然后赋值给variable" class="headerlink" title="第5步，创建三个radiobutton选项，其中variable=var, value=’A’的意思就是，当我们鼠标选中了其中一个选项，把value的值A放到变量var中，然后赋值给variable"></a>第5步，创建三个radiobutton选项，其中variable=var, value=’A’的意思就是，当我们鼠标选中了其中一个选项，把value的值A放到变量var中，然后赋值给variable</h5><p>r1 = tk.Radiobutton(window, text=’Option A’, variable=var, value=’A’, command=print_selection)</p><p>r1.pack()</p><p>r2 = tk.Radiobutton(window, text=’Option B’, variable=var, value=’B’, command=print_selection)</p><p>r2.pack()</p><p>r3 = tk.Radiobutton(window, text=’Option C’, variable=var, value=’C’, command=print_selection)</p><p>r3.pack()</p><h5 id="第7步，主窗口循环显示"><a href="#第7步，主窗口循环显示" class="headerlink" title="第7步，主窗口循环显示"></a>第7步，主窗口循环显示</h5><p>window.mainloop()</p><p>测试效果：</p><p>7.Checkbutton窗口部件</p><p>简单说明：</p><p>Checkbutton：代表一个变量，它有两个不同的值。点击这个按钮将会在这两个值间切换，选择和取消选择。</p><p>什么时候用：</p><p>在有一个很多内容选项组成的选项列表提供用户选择时会用到，用户一次可以选择多个。</p><p>示例代码：</p><p>#!/usr/bin/env python</p><h5 id="coding-utf-8-6"><a href="#coding-utf-8-6" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h5><h5 id="author-lamente-6"><a href="#author-lamente-6" class="headerlink" title="author:lamente"></a>author:lamente</h5><p>import tkinter as tk # 使用Tkinter前需要先导入</p><h5 id="第1步，实例化object，建立窗口window-6"><a href="#第1步，实例化object，建立窗口window-6" class="headerlink" title="第1步，实例化object，建立窗口window"></a>第1步，实例化object，建立窗口window</h5><p>window = tk.Tk()</p><h5 id="第2步，给窗口的可视化起名字-6"><a href="#第2步，给窗口的可视化起名字-6" class="headerlink" title="第2步，给窗口的可视化起名字"></a>第2步，给窗口的可视化起名字</h5><p>window.title(‘My Window’)</p><h5 id="第3步，设定窗口的大小-长-宽-6"><a href="#第3步，设定窗口的大小-长-宽-6" class="headerlink" title="第3步，设定窗口的大小(长 * 宽)"></a>第3步，设定窗口的大小(长 * 宽)</h5><p>window.geometry(‘500x300’) # 这里的乘是小x</p><h5 id="第4步，在图形界面上创建一个标签label用以显示并放置-2"><a href="#第4步，在图形界面上创建一个标签label用以显示并放置-2" class="headerlink" title="第4步，在图形界面上创建一个标签label用以显示并放置"></a>第4步，在图形界面上创建一个标签label用以显示并放置</h5><p>l = tk.Label(window, bg=’yellow’, width=20, text=’empty’)</p><p>l.pack()</p><h5 id="第6步，定义触发函数功能"><a href="#第6步，定义触发函数功能" class="headerlink" title="第6步，定义触发函数功能"></a>第6步，定义触发函数功能</h5><p>def print_selection():</p><p>if (var1.get() == 1) &amp; (var2.get() == 0): # 如果选中第一个选项，未选中第二个选项</p><p>l.config(text=’I love only Python ‘)</p><p>elif (var1.get() == 0) &amp; (var2.get() == 1): # 如果选中第二个选项，未选中第一个选项</p><p>l.config(text=’I love only C++’)</p><p>elif (var1.get() == 0) &amp; (var2.get() == 0): # 如果两个选项都未选中</p><p>l.config(text=’I do not love either’)</p><p>else:</p><p>l.config(text=’I love both’) # 如果两个选项都选中</p><h5 id="第5步，定义两个Checkbutton选项并放置"><a href="#第5步，定义两个Checkbutton选项并放置" class="headerlink" title="第5步，定义两个Checkbutton选项并放置"></a>第5步，定义两个Checkbutton选项并放置</h5><p>var1 = tk.IntVar() # 定义var1和var2整型变量用来存放选择行为返回值</p><p>var2 = tk.IntVar()</p><p>c1 = tk.Checkbutton(window, text=’Python’,variable=var1, onvalue=1, offvalue=0, command=print_selection) # 传值原理类似于radiobutton部件</p><p>c1.pack()</p><p>c2 = tk.Checkbutton(window, text=’C++’,variable=var2, onvalue=1, offvalue=0, command=print_selection)</p><p>c2.pack()</p><h5 id="第7步，主窗口循环显示-1"><a href="#第7步，主窗口循环显示-1" class="headerlink" title="第7步，主窗口循环显示"></a>第7步，主窗口循环显示</h5><p>window.mainloop()</p><p>测试效果：</p><p>8.Scale窗口部件</p><p>简单说明：</p><p>Scale： 尺度(拉动条)，允许你通过滑块来设置一数字值。</p><p>什么时候用：</p><p>在需要用户给出评价等级，或者给出一个评价分数，或者拉动滑动条提供一个具体的数值等等。</p><p>示例代码：</p><p>#!/usr/bin/env python</p><h5 id="coding-utf-8-7"><a href="#coding-utf-8-7" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h5><h5 id="author-lamente-7"><a href="#author-lamente-7" class="headerlink" title="author:lamente"></a>author:lamente</h5><p>import tkinter as tk # 使用Tkinter前需要先导入</p><h5 id="第1步，实例化object，建立窗口window-7"><a href="#第1步，实例化object，建立窗口window-7" class="headerlink" title="第1步，实例化object，建立窗口window"></a>第1步，实例化object，建立窗口window</h5><p>window = tk.Tk()</p><h5 id="第2步，给窗口的可视化起名字-7"><a href="#第2步，给窗口的可视化起名字-7" class="headerlink" title="第2步，给窗口的可视化起名字"></a>第2步，给窗口的可视化起名字</h5><p>window.title(‘My Window’)</p><h5 id="第3步，设定窗口的大小-长-宽-7"><a href="#第3步，设定窗口的大小-长-宽-7" class="headerlink" title="第3步，设定窗口的大小(长 * 宽)"></a>第3步，设定窗口的大小(长 * 宽)</h5><p>window.geometry(‘500x300’) # 这里的乘是小x</p><h5 id="第4步，在图形界面上创建一个标签label用以显示并放置-3"><a href="#第4步，在图形界面上创建一个标签label用以显示并放置-3" class="headerlink" title="第4步，在图形界面上创建一个标签label用以显示并放置"></a>第4步，在图形界面上创建一个标签label用以显示并放置</h5><p>l = tk.Label(window, bg=’green’, fg=’white’, width=20, text=’empty’)</p><p>l.pack()</p><h5 id="第6步，定义一个触发函数功能"><a href="#第6步，定义一个触发函数功能" class="headerlink" title="第6步，定义一个触发函数功能"></a>第6步，定义一个触发函数功能</h5><p>def print_selection(v):</p><p>l.config(text=’you have selected ‘ + v)</p><h5 id="第5步，创建一个尺度滑条，长度200字符，从0开始10结束，以2为刻度，精度为0-01，触发调用print-selection函数"><a href="#第5步，创建一个尺度滑条，长度200字符，从0开始10结束，以2为刻度，精度为0-01，触发调用print-selection函数" class="headerlink" title="第5步，创建一个尺度滑条，长度200字符，从0开始10结束，以2为刻度，精度为0.01，触发调用print_selection函数"></a>第5步，创建一个尺度滑条，长度200字符，从0开始10结束，以2为刻度，精度为0.01，触发调用print_selection函数</h5><p>s = tk.Scale(window, label=’try me’, from_=0, to=10, orient=tk.HORIZONTAL, length=200, showvalue=0,tickinterval=2, resolution=0.01, command=print_selection)</p><p>s.pack()</p><h5 id="第7步，主窗口循环显示-2"><a href="#第7步，主窗口循环显示-2" class="headerlink" title="第7步，主窗口循环显示"></a>第7步，主窗口循环显示</h5><p>window.mainloop()</p><p>测试效果：</p><p>9.Canvas窗口部件</p><p>简单说明：</p><p>Canvas：画布，提供绘图功能(直线、椭圆、多边形、矩形) 可以包含图形或位图，用来绘制图表和图，创建图形编辑器，实现定制窗口部件。</p><p>什么时候用：</p><p>在比如像用户交互界面等，需要提供设计的图标、图形、logo等信息是可以用到画布。</p><p>示例代码：</p><p>#!/usr/bin/env python</p><h5 id="coding-utf-8-8"><a href="#coding-utf-8-8" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h5><p>######### author:lamente</p><p>import tkinter as tk # 使用Tkinter前需要先导入</p><h5 id="第1步，实例化object，建立窗口window-8"><a href="#第1步，实例化object，建立窗口window-8" class="headerlink" title="第1步，实例化object，建立窗口window"></a>第1步，实例化object，建立窗口window</h5><p>window = tk.Tk()</p><h5 id="第2步，给窗口的可视化起名字-8"><a href="#第2步，给窗口的可视化起名字-8" class="headerlink" title="第2步，给窗口的可视化起名字"></a>第2步，给窗口的可视化起名字</h5><p>window.title(‘My Window’)</p><h5 id="第3步，设定窗口的大小-长-宽-8"><a href="#第3步，设定窗口的大小-长-宽-8" class="headerlink" title="第3步，设定窗口的大小(长 * 宽)"></a>第3步，设定窗口的大小(长 * 宽)</h5><p>window.geometry(‘500x300’) # 这里的乘是小x</p><h5 id="第4步，在图形界面上创建-500-200-大小的画布并放置各种元素"><a href="#第4步，在图形界面上创建-500-200-大小的画布并放置各种元素" class="headerlink" title="第4步，在图形界面上创建 500 * 200 大小的画布并放置各种元素"></a>第4步，在图形界面上创建 500 * 200 大小的画布并放置各种元素</h5><p>canvas = tk.Canvas(window, bg=’green’, height=200, width=500)</p><h5 id="说明图片位置，并导入图片到画布上"><a href="#说明图片位置，并导入图片到画布上" class="headerlink" title="说明图片位置，并导入图片到画布上"></a>说明图片位置，并导入图片到画布上</h5><p>image_file = tk.PhotoImage(file=’pic.gif’) # 图片位置(相对路径，与.py文件同一文件夹下，也可以用绝对路径，需要给定图片具体绝对路径)</p><p>image = canvas.create_image(250, 0, anchor=’n’,image=image_file) # 图片锚定点(n图片顶端的中间点位置)放在画布(250,0)坐标处</p><h5 id="定义多边形参数，然后在画布上画出指定图形"><a href="#定义多边形参数，然后在画布上画出指定图形" class="headerlink" title="定义多边形参数，然后在画布上画出指定图形"></a>定义多边形参数，然后在画布上画出指定图形</h5><p>x0, y0, x1, y1 = 100, 100, 150, 150</p><p>line = canvas.create_line(x0-50, y0-50, x1-50, y1-50) # 画直线</p><p>oval = canvas.create_oval(x0+120, y0+50, x1+120, y1+50, fill=’yellow’) # 画圆 用黄色填充</p><p>arc = canvas.create_arc(x0, y0+50, x1, y1+50, start=0, extent=180) # 画扇形 从0度打开收到180度结束</p><p>rect = canvas.create_rectangle(330, 30, 330+20, 30+20) # 画矩形正方形</p><p>canvas.pack()</p><h5 id="第6步，触发函数，用来一定指定图形"><a href="#第6步，触发函数，用来一定指定图形" class="headerlink" title="第6步，触发函数，用来一定指定图形"></a>第6步，触发函数，用来一定指定图形</h5><p>def moveit():</p><p>canvas.move(rect, 2, 2) # 移动正方形rect(也可以改成其他图形名字用以移动一起图形、元素)，按每次(x=2, y=2)步长进行移动</p><h5 id="第5步，定义一个按钮用来移动指定图形的在画布上的位置"><a href="#第5步，定义一个按钮用来移动指定图形的在画布上的位置" class="headerlink" title="第5步，定义一个按钮用来移动指定图形的在画布上的位置"></a>第5步，定义一个按钮用来移动指定图形的在画布上的位置</h5><p>b = tk.Button(window, text=’move item’,command=moveit).pack()</p><h5 id="第7步，主窗口循环显示-3"><a href="#第7步，主窗口循环显示-3" class="headerlink" title="第7步，主窗口循环显示"></a>第7步，主窗口循环显示</h5><p>window.mainloop()</p><p>所用图片：</p><p>当然你可以随意用你的一张图片导入画布试一试效果，图片可以用画图工具改一下像素大小，以免图片太大，导入画布显示不全，当然你也可以用我提供的素材，下面是链接：<a href="https://files.cnblogs.com/files/shwee/pic.gif">https://files.cnblogs.com/files/shwee/pic.gif</a></p><p>[外链图片转存失败(img-YHDWyHGj-1566918546136)(15.gif)]</p><p>测试效果：</p><p>10.Menu窗口部件</p><p>简单说明：</p><p>Menu：菜单条，用来实现下拉和弹出式菜单，点下菜单后弹出的一个选项列表,用户可以从中选择</p><p>什么时候用：</p><p>在比如像软件或网页交互界面等，需要提供菜单选项功能提供用户选择菜单选项功能时用到。</p><p>示例代码：</p><p>#!/usr/bin/env python</p><p>######### -<em>- coding: utf-8 -</em>-</p><p>######### author:lamente</p><p>import tkinter as tk # 使用Tkinter前需要先导入</p><h5 id="第1步，实例化object，建立窗口window-9"><a href="#第1步，实例化object，建立窗口window-9" class="headerlink" title="第1步，实例化object，建立窗口window"></a>第1步，实例化object，建立窗口window</h5><p>window = tk.Tk()</p><h5 id="第2步，给窗口的可视化起名字-9"><a href="#第2步，给窗口的可视化起名字-9" class="headerlink" title="第2步，给窗口的可视化起名字"></a>第2步，给窗口的可视化起名字</h5><p>window.title(‘My Window’)</p><h5 id="第3步，设定窗口的大小-长-宽-9"><a href="#第3步，设定窗口的大小-长-宽-9" class="headerlink" title="第3步，设定窗口的大小(长 * 宽)"></a>第3步，设定窗口的大小(长 * 宽)</h5><p>window.geometry(‘500x300’) # 这里的乘是小x</p><h5 id="第4步，在图形界面上创建一个标签用以显示内容并放置"><a href="#第4步，在图形界面上创建一个标签用以显示内容并放置" class="headerlink" title="第4步，在图形界面上创建一个标签用以显示内容并放置"></a>第4步，在图形界面上创建一个标签用以显示内容并放置</h5><p>l = tk.Label(window, text=’ ‘, bg=’green’)</p><p>l.pack()</p><h5 id="第10步，定义一个函数功能，用来代表菜单选项的功能，这里为了操作简单，定义的功能比较简单"><a href="#第10步，定义一个函数功能，用来代表菜单选项的功能，这里为了操作简单，定义的功能比较简单" class="headerlink" title="第10步，定义一个函数功能，用来代表菜单选项的功能，这里为了操作简单，定义的功能比较简单"></a>第10步，定义一个函数功能，用来代表菜单选项的功能，这里为了操作简单，定义的功能比较简单</h5><p>counter = 0</p><p>def do_job():</p><p>global counter</p><p>l.config(text=’do ‘+ str(counter))</p><p>counter += 1</p><h5 id="第5步，创建一个菜单栏，这里我们可以把他理解成一个容器，在窗口的上方"><a href="#第5步，创建一个菜单栏，这里我们可以把他理解成一个容器，在窗口的上方" class="headerlink" title="第5步，创建一个菜单栏，这里我们可以把他理解成一个容器，在窗口的上方"></a>第5步，创建一个菜单栏，这里我们可以把他理解成一个容器，在窗口的上方</h5><p>menubar = tk.Menu(window)</p><h5 id="第6步，创建一个File菜单项-默认不下拉，下拉内容包括New，Open，Save，Exit功能项"><a href="#第6步，创建一个File菜单项-默认不下拉，下拉内容包括New，Open，Save，Exit功能项" class="headerlink" title="第6步，创建一个File菜单项(默认不下拉，下拉内容包括New，Open，Save，Exit功能项)"></a>第6步，创建一个File菜单项(默认不下拉，下拉内容包括New，Open，Save，Exit功能项)</h5><p>filemenu = tk.Menu(menubar, tearoff=0)</p><h5 id="将上面定义的空菜单命名为File，放在菜单栏中，就是装入那个容器中"><a href="#将上面定义的空菜单命名为File，放在菜单栏中，就是装入那个容器中" class="headerlink" title="将上面定义的空菜单命名为File，放在菜单栏中，就是装入那个容器中"></a>将上面定义的空菜单命名为File，放在菜单栏中，就是装入那个容器中</h5><p>menubar.add_cascade(label=’File’, menu=filemenu)</p><h5 id="在File中加入New、Open、Save等小菜单，即我们平时看到的下拉菜单，每一个小菜单对应命令操作。"><a href="#在File中加入New、Open、Save等小菜单，即我们平时看到的下拉菜单，每一个小菜单对应命令操作。" class="headerlink" title="在File中加入New、Open、Save等小菜单，即我们平时看到的下拉菜单，每一个小菜单对应命令操作。"></a>在File中加入New、Open、Save等小菜单，即我们平时看到的下拉菜单，每一个小菜单对应命令操作。</h5><p>filemenu.add_command(label=’New’, command=do_job)</p><p>filemenu.add_command(label=’Open’, command=do_job)</p><p>filemenu.add_command(label=’Save’, command=do_job)</p><p>filemenu.add_separator() # 添加一条分隔线</p><p>filemenu.add_command(label=’Exit’, command=window.quit) # 用tkinter里面自带的quit()函数</p><h5 id="第7步，创建一个Edit菜单项-默认不下拉，下拉内容包括Cut，Copy，Paste功能项"><a href="#第7步，创建一个Edit菜单项-默认不下拉，下拉内容包括Cut，Copy，Paste功能项" class="headerlink" title="第7步，创建一个Edit菜单项(默认不下拉，下拉内容包括Cut，Copy，Paste功能项)"></a>第7步，创建一个Edit菜单项(默认不下拉，下拉内容包括Cut，Copy，Paste功能项)</h5><p>editmenu = tk.Menu(menubar, tearoff=0)</p><h5 id="将上面定义的空菜单命名为-Edit，放在菜单栏中，就是装入那个容器中"><a href="#将上面定义的空菜单命名为-Edit，放在菜单栏中，就是装入那个容器中" class="headerlink" title="将上面定义的空菜单命名为 Edit，放在菜单栏中，就是装入那个容器中"></a>将上面定义的空菜单命名为 Edit，放在菜单栏中，就是装入那个容器中</h5><p>menubar.add_cascade(label=’Edit’, menu=editmenu)</p><h5 id="同样的在-Edit-中加入Cut、Copy、Paste等小命令功能单元，如果点击这些单元-就会触发do-job的功能"><a href="#同样的在-Edit-中加入Cut、Copy、Paste等小命令功能单元，如果点击这些单元-就会触发do-job的功能" class="headerlink" title="同样的在 Edit 中加入Cut、Copy、Paste等小命令功能单元，如果点击这些单元, 就会触发do_job的功能"></a>同样的在 Edit 中加入Cut、Copy、Paste等小命令功能单元，如果点击这些单元, 就会触发do_job的功能</h5><p>editmenu.add_command(label=’Cut’, command=do_job)</p><p>editmenu.add_command(label=’Copy’, command=do_job)</p><p>editmenu.add_command(label=’Paste’, command=do_job)</p><h5 id="第8步，创建第二级菜单，即菜单项里面的菜单"><a href="#第8步，创建第二级菜单，即菜单项里面的菜单" class="headerlink" title="第8步，创建第二级菜单，即菜单项里面的菜单"></a>第8步，创建第二级菜单，即菜单项里面的菜单</h5><p>submenu = tk.Menu(filemenu) # 和上面定义菜单一样，不过此处实在File上创建一个空的菜单</p><p>filemenu.add_cascade(label=’Import’, menu=submenu, underline=0) # 给放入的菜单submenu命名为Import</p><h5 id="第9步，创建第三级菜单命令，即菜单项里面的菜单项里面的菜单命令-有点拗口，笑"><a href="#第9步，创建第三级菜单命令，即菜单项里面的菜单项里面的菜单命令-有点拗口，笑" class="headerlink" title="第9步，创建第三级菜单命令，即菜单项里面的菜单项里面的菜单命令(有点拗口，笑~~~)"></a>第9步，创建第三级菜单命令，即菜单项里面的菜单项里面的菜单命令(有点拗口，笑~~~)</h5><p>submenu.add_command(label=’Submenu_1’, command=do_job) # 这里和上面创建原理也一样，在Import菜单项中加入一个小菜单命令Submenu_1</p><h5 id="第11步，创建菜单栏完成后，配置让菜单栏menubar显示出来"><a href="#第11步，创建菜单栏完成后，配置让菜单栏menubar显示出来" class="headerlink" title="第11步，创建菜单栏完成后，配置让菜单栏menubar显示出来"></a>第11步，创建菜单栏完成后，配置让菜单栏menubar显示出来</h5><p>window.config(menu=menubar)</p><h5 id="第12步，主窗口循环显示"><a href="#第12步，主窗口循环显示" class="headerlink" title="第12步，主窗口循环显示"></a>第12步，主窗口循环显示</h5><p>window.mainloop()</p><p>测试效果：</p><p>11.Frame 窗口部件</p><p>简单说明：</p><p>Frame：框架，用来承载放置其他GUI元素，就是一个容器，是一个在 Windows 上分离小区域的部件, 它能将 Windows 分成不同的区,然后存放不同的其他部件. 同时一个 Frame 上也能再分成两个 Frame, Frame 可以认为是一种容器.</p><p>什么时候用：</p><p>在比如像软件或网页交互界面等，有不同的界面逻辑层级和功能区域划分时可以用到，让交互界面逻辑更加清晰。</p><p>示例代码：</p><p>#!/usr/bin/env python</p><h5 id="coding-utf-8-9"><a href="#coding-utf-8-9" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h5><h5 id="author-lamente-8"><a href="#author-lamente-8" class="headerlink" title="author:lamente"></a>author:lamente</h5><p>import tkinter as tk # 使用Tkinter前需要先导入</p><h5 id="第1步，实例化object，建立窗口window-10"><a href="#第1步，实例化object，建立窗口window-10" class="headerlink" title="第1步，实例化object，建立窗口window"></a>第1步，实例化object，建立窗口window</h5><p>window = tk.Tk()</p><h5 id="第2步，给窗口的可视化起名字-10"><a href="#第2步，给窗口的可视化起名字-10" class="headerlink" title="第2步，给窗口的可视化起名字"></a>第2步，给窗口的可视化起名字</h5><p>window.title(‘My Window’)</p><h5 id="第3步，设定窗口的大小-长-宽-10"><a href="#第3步，设定窗口的大小-长-宽-10" class="headerlink" title="第3步，设定窗口的大小(长 * 宽)"></a>第3步，设定窗口的大小(长 * 宽)</h5><p>window.geometry(‘500x300’) # 这里的乘是小x</p><h5 id="第4步，在图形界面上创建一个标签用以显示内容并放置-1"><a href="#第4步，在图形界面上创建一个标签用以显示内容并放置-1" class="headerlink" title="第4步，在图形界面上创建一个标签用以显示内容并放置"></a>第4步，在图形界面上创建一个标签用以显示内容并放置</h5><p>tk.Label(window, text=’on the window’, bg=’red’, font=(‘Arial’, 16)).pack() # 和前面部件分开创建和放置不同，其实可以创建和放置一步完成</p><h5 id="第5步，创建一个主frame，长在主window窗口上"><a href="#第5步，创建一个主frame，长在主window窗口上" class="headerlink" title="第5步，创建一个主frame，长在主window窗口上"></a>第5步，创建一个主frame，长在主window窗口上</h5><p>frame = tk.Frame(window)</p><p>frame.pack()</p><h5 id="第6步，创建第二层框架frame，长在主框架frame上面"><a href="#第6步，创建第二层框架frame，长在主框架frame上面" class="headerlink" title="第6步，创建第二层框架frame，长在主框架frame上面"></a>第6步，创建第二层框架frame，长在主框架frame上面</h5><p>frame_l = tk.Frame(frame)# 第二层frame，左frame，长在主frame上</p><p>frame_r = tk.Frame(frame)# 第二层frame，右frame，长在主frame上</p><p>frame_l.pack(side=’left’)</p><p>frame_r.pack(side=’right’)</p><h5 id="第7步，创建三组标签，为第二层frame上面的内容，分为左区域和右区域，用不同颜色标识"><a href="#第7步，创建三组标签，为第二层frame上面的内容，分为左区域和右区域，用不同颜色标识" class="headerlink" title="第7步，创建三组标签，为第二层frame上面的内容，分为左区域和右区域，用不同颜色标识"></a>第7步，创建三组标签，为第二层frame上面的内容，分为左区域和右区域，用不同颜色标识</h5><p>tk.Label(frame_l, text=’on the frame_l1’, bg=’green’).pack()</p><p>tk.Label(frame_l, text=’on the frame_l2’, bg=’green’).pack()</p><p>tk.Label(frame_l, text=’on the frame_l3’, bg=’green’).pack()</p><p>tk.Label(frame_r, text=’on the frame_r1’, bg=’yellow’).pack()</p><p>tk.Label(frame_r, text=’on the frame_r2’, bg=’yellow’).pack()</p><p>tk.Label(frame_r, text=’on the frame_r3’, bg=’yellow’).pack()</p><h5 id="第8步，主窗口循环显示-2"><a href="#第8步，主窗口循环显示-2" class="headerlink" title="第8步，主窗口循环显示"></a>第8步，主窗口循环显示</h5><p>window.mainloop()</p><p>测试效果：</p><p>12.messageBox窗口部件</p><p>简单说明：</p><p>messageBox：消息框，用于显示你应用程序的消息框。(Python2中为tkMessagebox)，其实这里的messageBox就是我们平时看到的弹窗。 我们首先需要定义一个触发功能，来触发这个弹窗，这里我们就放上以前学过的button按钮，通过触发功能，调用messagebox吧，点击button按钮就会弹出提示对话框。下面给出messagebox提示信息的几种形式：</p><p>tkinter.messagebox.showinfo(title=’Hi’, message=’你好！’) # 提示信息对话窗</p><p>tkinter.messagebox.showwarning(title=’Hi’, message=’有警告！’) # 提出警告对话窗</p><p>tkinter.messagebox.showerror(title=’Hi’, message=’出错了！’) # 提出错误对话窗</p><p>print(tkinter.messagebox.askquestion(title=’Hi’, message=’你好！’)) # 询问选择对话窗return ‘yes’, ‘no’</p><p>print(tkinter.messagebox.askyesno(title=’Hi’, message=’你好！’)) # return ‘True’, ‘False’</p><p>print(tkinter.messagebox.askokcancel(title=’Hi’, message=’你好！’)) # return ‘True’, ‘False’</p><p>什么时候用：</p><p>在比如像软件或网页交互界面等，有不同的界面逻辑层级和功能区域划分时可以用到，让交互界面逻辑更加清晰。</p><p>示例代码：</p><p>#!/usr/bin/env python</p><h5 id="coding-utf-8-10"><a href="#coding-utf-8-10" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h5><h5 id="author-lamente-9"><a href="#author-lamente-9" class="headerlink" title="author:lamente"></a>author:lamente</h5><p>import tkinter as tk # 使用Tkinter前需要先导入</p><p>import tkinter.messagebox # 要使用messagebox先要导入模块</p><h5 id="第1步，实例化object，建立窗口window-11"><a href="#第1步，实例化object，建立窗口window-11" class="headerlink" title="第1步，实例化object，建立窗口window"></a>第1步，实例化object，建立窗口window</h5><p>window = tk.Tk()</p><h5 id="第2步，给窗口的可视化起名字-11"><a href="#第2步，给窗口的可视化起名字-11" class="headerlink" title="第2步，给窗口的可视化起名字"></a>第2步，给窗口的可视化起名字</h5><p>window.title(‘My Window’)</p><h5 id="第3步，设定窗口的大小-长-宽-11"><a href="#第3步，设定窗口的大小-长-宽-11" class="headerlink" title="第3步，设定窗口的大小(长 * 宽)"></a>第3步，设定窗口的大小(长 * 宽)</h5><p>window.geometry(‘500x300’) # 这里的乘是小x</p><h5 id="第5步，定义触发函数功能"><a href="#第5步，定义触发函数功能" class="headerlink" title="第5步，定义触发函数功能"></a>第5步，定义触发函数功能</h5><p>def hit_me():</p><p>tkinter.messagebox.showinfo(title=’Hi’, message=’你好！’) # 提示信息对话窗</p><h5 id="tkinter-messagebox-showwarning-title-’Hi’-message-’有警告！’-提出警告对话窗"><a href="#tkinter-messagebox-showwarning-title-’Hi’-message-’有警告！’-提出警告对话窗" class="headerlink" title="tkinter.messagebox.showwarning(title=’Hi’, message=’有警告！’) # 提出警告对话窗"></a>tkinter.messagebox.showwarning(title=’Hi’, message=’有警告！’) # 提出警告对话窗</h5><h5 id="tkinter-messagebox-showerror-title-’Hi’-message-’出错了！’-提出错误对话窗"><a href="#tkinter-messagebox-showerror-title-’Hi’-message-’出错了！’-提出错误对话窗" class="headerlink" title="tkinter.messagebox.showerror(title=’Hi’, message=’出错了！’) # 提出错误对话窗"></a>tkinter.messagebox.showerror(title=’Hi’, message=’出错了！’) # 提出错误对话窗</h5><h5 id="print-tkinter-messagebox-askquestion-title-’Hi’-message-’你好！’-询问选择对话窗return-‘yes’-‘no’"><a href="#print-tkinter-messagebox-askquestion-title-’Hi’-message-’你好！’-询问选择对话窗return-‘yes’-‘no’" class="headerlink" title="print(tkinter.messagebox.askquestion(title=’Hi’, message=’你好！’)) # 询问选择对话窗return ‘yes’, ‘no’"></a>print(tkinter.messagebox.askquestion(title=’Hi’, message=’你好！’)) # 询问选择对话窗return ‘yes’, ‘no’</h5><h5 id="print-tkinter-messagebox-askyesno-title-’Hi’-message-’你好！’-return-‘True’-‘False’"><a href="#print-tkinter-messagebox-askyesno-title-’Hi’-message-’你好！’-return-‘True’-‘False’" class="headerlink" title="print(tkinter.messagebox.askyesno(title=’Hi’, message=’你好！’)) # return ‘True’, ‘False’"></a>print(tkinter.messagebox.askyesno(title=’Hi’, message=’你好！’)) # return ‘True’, ‘False’</h5><h5 id="print-tkinter-messagebox-askokcancel-title-’Hi’-message-’你好！’-return-‘True’-‘False’"><a href="#print-tkinter-messagebox-askokcancel-title-’Hi’-message-’你好！’-return-‘True’-‘False’" class="headerlink" title="print(tkinter.messagebox.askokcancel(title=’Hi’, message=’你好！’)) # return ‘True’, ‘False’"></a>print(tkinter.messagebox.askokcancel(title=’Hi’, message=’你好！’)) # return ‘True’, ‘False’</h5><h5 id="第4步，在图形界面上创建一个标签用以显示内容并放置-2"><a href="#第4步，在图形界面上创建一个标签用以显示内容并放置-2" class="headerlink" title="第4步，在图形界面上创建一个标签用以显示内容并放置"></a>第4步，在图形界面上创建一个标签用以显示内容并放置</h5><p>tk.Button(window, text=’hit me’, bg=’green’, font=(‘Arial’, 14), command=hit_me).pack()</p><h5 id="第6步，主窗口循环显示-2"><a href="#第6步，主窗口循环显示-2" class="headerlink" title="第6步，主窗口循环显示"></a>第6步，主窗口循环显示</h5><p>window.mainloop()</p><p>测试效果：</p><p>13.窗口部件三种放置方式pack/grid/place</p><p>参考来源：</p><p>1.Grid：The Grid Geometry Manager</p><p>grid 是方格, 所以所有的内容会被放在这些规律的方格中。例如：</p><p>for i in range(3):</p><p>for j in range(3):</p><p>tk.Label(window, text=1).grid(row=i, column=j, padx=10, pady=10, ipadx=10, ipady=10)</p><p>以上的代码就是创建一个三行三列的表格，其实 grid 就是用表格的形式定位的。这里的参数 row 为行，colum 为列，padx 就是单元格左右间距，pady 就是单元格上下间距，ipadx是单元格内部元素与单元格的左右间距，ipady是单元格内部元素与单元格的上下间距。</p><p>示例代码：</p><p>#!/usr/bin/env python</p><h5 id="author-lamente-10"><a href="#author-lamente-10" class="headerlink" title="author:lamente"></a>author:lamente</h5><p>import tkinter as tk # 使用Tkinter前需要先导入</p><h5 id="第1步，实例化object，建立窗口window-12"><a href="#第1步，实例化object，建立窗口window-12" class="headerlink" title="第1步，实例化object，建立窗口window"></a>第1步，实例化object，建立窗口window</h5><p>window = tk.Tk()</p><h5 id="第2步，给窗口的可视化起名字-12"><a href="#第2步，给窗口的可视化起名字-12" class="headerlink" title="第2步，给窗口的可视化起名字"></a>第2步，给窗口的可视化起名字</h5><p>window.title(‘My Window’)</p><h5 id="第3步，设定窗口的大小-长-宽-12"><a href="#第3步，设定窗口的大小-长-宽-12" class="headerlink" title="第3步，设定窗口的大小(长 * 宽)"></a>第3步，设定窗口的大小(长 * 宽)</h5><p>window.geometry(‘500x300’) # 这里的乘是小x</p><h5 id="第4步，grid-放置方法"><a href="#第4步，grid-放置方法" class="headerlink" title="第4步，grid 放置方法"></a>第4步，grid 放置方法</h5><p>for i in range(3):</p><p>for j in range(3):</p><p>tk.Label(window, text=1).grid(row=i, column=j, padx=10, pady=10, ipadx=10, ipady=10)</p><h5 id="第5步，主窗口循环显示-1"><a href="#第5步，主窗口循环显示-1" class="headerlink" title="第5步，主窗口循环显示"></a>第5步，主窗口循环显示</h5><p>window.mainloop()</p><p>测试效果：</p><p>2.Pack：The Pack Geometry Manager</p><p>我们常用的pack(), 他会按照上下左右的方式排列.例如：</p><p>tk.Label(window, text=’P’, fg=’red’).pack(side=’top’) # 上</p><p>tk.Label(window, text=’P’, fg=’red’).pack(side=’bottom’) # 下</p><p>tk.Label(window, text=’P’, fg=’red’).pack(side=’left’) # 左</p><p>tk.Label(window, text=’P’, fg=’red’).pack(side=’right’) # 右</p><p>示例代码：</p><p>#!/usr/bin/env python</p><h5 id="coding-utf-8-11"><a href="#coding-utf-8-11" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h5><h5 id="author-lamente-11"><a href="#author-lamente-11" class="headerlink" title="author:lamente"></a>author:lamente</h5><p>import tkinter as tk # 使用Tkinter前需要先导入</p><h5 id="第1步，实例化object，建立窗口window-13"><a href="#第1步，实例化object，建立窗口window-13" class="headerlink" title="第1步，实例化object，建立窗口window"></a>第1步，实例化object，建立窗口window</h5><p>window = tk.Tk()</p><h5 id="第2步，给窗口的可视化起名字-13"><a href="#第2步，给窗口的可视化起名字-13" class="headerlink" title="第2步，给窗口的可视化起名字"></a>第2步，给窗口的可视化起名字</h5><p>window.title(‘My Window’)</p><h5 id="第3步，设定窗口的大小-长-宽-13"><a href="#第3步，设定窗口的大小-长-宽-13" class="headerlink" title="第3步，设定窗口的大小(长 * 宽)"></a>第3步，设定窗口的大小(长 * 宽)</h5><p>window.geometry(‘500x300’) # 这里的乘是小x</p><h5 id="第4步，pack-放置方法"><a href="#第4步，pack-放置方法" class="headerlink" title="第4步，pack 放置方法"></a>第4步，pack 放置方法</h5><p>tk.Label(window, text=’P’, fg=’red’).pack(side=’top’) # 上</p><p>tk.Label(window, text=’P’, fg=’red’).pack(side=’bottom’) # 下</p><p>tk.Label(window, text=’P’, fg=’red’).pack(side=’left’) # 左</p><p>tk.Label(window, text=’P’, fg=’red’).pack(side=’right’) # 右</p><h5 id="第5步，主窗口循环显示-2"><a href="#第5步，主窗口循环显示-2" class="headerlink" title="第5步，主窗口循环显示"></a>第5步，主窗口循环显示</h5><p>window.mainloop()</p><p>测试效果：</p><p>3.Place：The Place Geometry Manager</p><p>再接下来我们来看place(), 这个比较容易理解，就是给精确的坐标来定位，如此处给的(50, 100)，就是将这个部件放在坐标为(x=50, y=100)的这个位置, 后面的参数 anchor=’nw’，就是前面所讲的锚定点是西北角。例如：</p><p>tk.Label(window, text=’Pl’, font=(‘Arial’, 20), ).place(x=50, y=100, anchor=’nw’)</p><p>示例代码：</p><p>#!/usr/bin/env python</p><h5 id="coding-utf-8-12"><a href="#coding-utf-8-12" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h5><h5 id="author-lamente-12"><a href="#author-lamente-12" class="headerlink" title="author:lamente"></a>author:lamente</h5><p>import tkinter as tk # 使用Tkinter前需要先导入</p><h5 id="第1步，实例化object，建立窗口window-14"><a href="#第1步，实例化object，建立窗口window-14" class="headerlink" title="第1步，实例化object，建立窗口window"></a>第1步，实例化object，建立窗口window</h5><p>window = tk.Tk()</p><h5 id="第2步，给窗口的可视化起名字-14"><a href="#第2步，给窗口的可视化起名字-14" class="headerlink" title="第2步，给窗口的可视化起名字"></a>第2步，给窗口的可视化起名字</h5><p>window.title(‘My Window’)</p><h5 id="第3步，设定窗口的大小-长-宽-14"><a href="#第3步，设定窗口的大小-长-宽-14" class="headerlink" title="第3步，设定窗口的大小(长 * 宽)"></a>第3步，设定窗口的大小(长 * 宽)</h5><p>window.geometry(‘500x300’) # 这里的乘是小x</p><h5 id="第4步，place-放置方法-精准的放置到指定坐标点的位置上"><a href="#第4步，place-放置方法-精准的放置到指定坐标点的位置上" class="headerlink" title="第4步，place 放置方法(精准的放置到指定坐标点的位置上)"></a>第4步，place 放置方法(精准的放置到指定坐标点的位置上)</h5><p>tk.Label(window, text=’Pl’, font=(‘Arial’, 20), ).place(x=50, y=100, anchor=’nw’)</p><h5 id="第5步，主窗口循环显示-3"><a href="#第5步，主窗口循环显示-3" class="headerlink" title="第5步，主窗口循环显示"></a>第5步，主窗口循环显示</h5><p>window.mainloop()</p><p>测试效果：</p><p>14.综合练习，用户登录窗口例子</p><p>编写一个用户登录界面，用户可以登录账户信息，如果账户已经存在，可以直接登录，登录名或者登录密码输入错误会提示，如果账户不存在，提示用户注册，点击注册进去注册页面，输入注册信息，确定后便可以返回登录界面进行登录。</p><p>示例代码：</p><p>#!/usr/bin/env python</p><h5 id="coding-utf-8-13"><a href="#coding-utf-8-13" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h5><h5 id="author-lamente-13"><a href="#author-lamente-13" class="headerlink" title="author:lamente"></a>author:lamente</h5><p>import tkinter as tk # 使用Tkinter前需要先导入</p><p>import tkinter.messagebox</p><p>import pickle</p><h5 id="第1步，实例化object，建立窗口window-15"><a href="#第1步，实例化object，建立窗口window-15" class="headerlink" title="第1步，实例化object，建立窗口window"></a>第1步，实例化object，建立窗口window</h5><p>window = tk.Tk()</p><h5 id="第2步，给窗口的可视化起名字-15"><a href="#第2步，给窗口的可视化起名字-15" class="headerlink" title="第2步，给窗口的可视化起名字"></a>第2步，给窗口的可视化起名字</h5><p>window.title(‘Wellcome to Hongwei Website’)</p><h5 id="第3步，设定窗口的大小-长-宽-15"><a href="#第3步，设定窗口的大小-长-宽-15" class="headerlink" title="第3步，设定窗口的大小(长 * 宽)"></a>第3步，设定窗口的大小(长 * 宽)</h5><p>window.geometry(‘400x300’) # 这里的乘是小x</p><h5 id="第4步，加载-wellcome-image"><a href="#第4步，加载-wellcome-image" class="headerlink" title="第4步，加载 wellcome image"></a>第4步，加载 wellcome image</h5><p>canvas = tk.Canvas(window, width=400, height=135, bg=’green’)</p><p>image_file = tk.PhotoImage(file=’pic.gif’)</p><p>image = canvas.create_image(200, 0, anchor=’n’, image=image_file)</p><p>canvas.pack(side=’top’)</p><p>tk.Label(window, text=’Wellcome’,font=(‘Arial’, 16)).pack()</p><h5 id="第5步，用户信息"><a href="#第5步，用户信息" class="headerlink" title="第5步，用户信息"></a>第5步，用户信息</h5><p>tk.Label(window, text=’User name:’, font=(‘Arial’, 14)).place(x=10, y=170)</p><p>tk.Label(window, text=’Password:’, font=(‘Arial’, 14)).place(x=10, y=210)</p><h5 id="第6步，用户登录输入框entry"><a href="#第6步，用户登录输入框entry" class="headerlink" title="第6步，用户登录输入框entry"></a>第6步，用户登录输入框entry</h5><h5 id="用户名"><a href="#用户名" class="headerlink" title="用户名"></a>用户名</h5><p>var_usr_name = tk.StringVar()</p><p>var_usr_name.set(‘example@python.com’)</p><p>entry_usr_name = tk.Entry(window, textvariable=var_usr_name, font=(‘Arial’, 14))</p><p>entry_usr_name.place(x=120,y=175)</p><h5 id="用户密码"><a href="#用户密码" class="headerlink" title="用户密码"></a>用户密码</h5><p>var_usr_pwd = tk.StringVar()</p><p>entry_usr_pwd = tk.Entry(window, textvariable=var_usr_pwd, font=(‘Arial’, 14), show=’*’)</p><p>entry_usr_pwd.place(x=120,y=215)</p><h5 id="第8步，定义用户登录功能"><a href="#第8步，定义用户登录功能" class="headerlink" title="第8步，定义用户登录功能"></a>第8步，定义用户登录功能</h5><p>def usr_login():</p><h5 id="这两行代码就是获取用户输入的usr-name和usr-pwd"><a href="#这两行代码就是获取用户输入的usr-name和usr-pwd" class="headerlink" title="这两行代码就是获取用户输入的usr_name和usr_pwd"></a>这两行代码就是获取用户输入的usr_name和usr_pwd</h5><p>usr_name = var_usr_name.get()</p><p>usr_pwd = var_usr_pwd.get()</p><h5 id="这里设置异常捕获，当我们第一次访问用户信息文件时是不存在的，所以这里设置异常捕获。"><a href="#这里设置异常捕获，当我们第一次访问用户信息文件时是不存在的，所以这里设置异常捕获。" class="headerlink" title="这里设置异常捕获，当我们第一次访问用户信息文件时是不存在的，所以这里设置异常捕获。"></a>这里设置异常捕获，当我们第一次访问用户信息文件时是不存在的，所以这里设置异常捕获。</h5><h4 id="中间的两行就是我们的匹配，即程序将输入的信息和文件中的信息匹配。"><a href="#中间的两行就是我们的匹配，即程序将输入的信息和文件中的信息匹配。" class="headerlink" title="中间的两行就是我们的匹配，即程序将输入的信息和文件中的信息匹配。"></a>中间的两行就是我们的匹配，即程序将输入的信息和文件中的信息匹配。</h4><p>try:</p><p>with open(‘usrs_info.pickle’, ‘rb’) as usr_file:</p><p>usrs_info = pickle.load(usr_file)</p><p>except FileNotFoundError:</p><h5 id="这里就是我们在没有读取到usr-file的时候，程序会创建一个usr-file这个文件，并将管理员"><a href="#这里就是我们在没有读取到usr-file的时候，程序会创建一个usr-file这个文件，并将管理员" class="headerlink" title="这里就是我们在没有读取到usr_file的时候，程序会创建一个usr_file这个文件，并将管理员"></a>这里就是我们在没有读取到<code>usr_file</code>的时候，程序会创建一个<code>usr_file</code>这个文件，并将管理员</h5><h5 id="的用户和密码写入，即用户名为admin密码为admin。"><a href="#的用户和密码写入，即用户名为admin密码为admin。" class="headerlink" title="的用户和密码写入，即用户名为admin密码为admin。"></a>的用户和密码写入，即用户名为<code>admin</code>密码为<code>admin</code>。</h5><p>with open(‘usrs_info.pickle’, ‘wb’) as usr_file:</p><p>usrs_info = {‘admin’: ‘admin’}</p><p>pickle.dump(usrs_info, usr_file)</p><p>usr_file.close() # 必须先关闭，否则pickle.load()会出现EOFError: Ran out of input</p><h5 id="如果用户名和密码与文件中的匹配成功，则会登录成功，并跳出弹窗how-are-you-加上你的用户名。"><a href="#如果用户名和密码与文件中的匹配成功，则会登录成功，并跳出弹窗how-are-you-加上你的用户名。" class="headerlink" title="如果用户名和密码与文件中的匹配成功，则会登录成功，并跳出弹窗how are you? 加上你的用户名。"></a>如果用户名和密码与文件中的匹配成功，则会登录成功，并跳出弹窗how are you? 加上你的用户名。</h5><p>if usr_name in usrs_info:</p><p>if usr_pwd == usrs_info[usr_name]:</p><p>tkinter.messagebox.showinfo(title=’Welcome’, message=’How are you? ‘ + usr_name)</p><h5 id="如果用户名匹配成功，而密码输入错误，则会弹出’Error-your-password-is-wrong-try-again-’"><a href="#如果用户名匹配成功，而密码输入错误，则会弹出’Error-your-password-is-wrong-try-again-’" class="headerlink" title="如果用户名匹配成功，而密码输入错误，则会弹出’Error, your password is wrong, try again.’"></a>如果用户名匹配成功，而密码输入错误，则会弹出’Error, your password is wrong, try again.’</h5><p>else:</p><p>tkinter.messagebox.showerror(message=’Error, your password is wrong, try again.’)</p><p>else: # 如果发现用户名不存在</p><p>is_sign_up = tkinter.messagebox.askyesno(‘Welcome！ ‘, ‘You have not sign up yet. Sign up now?’)</p><h5 id="提示需不需要注册新用户"><a href="#提示需不需要注册新用户" class="headerlink" title="提示需不需要注册新用户"></a>提示需不需要注册新用户</h5><p>if is_sign_up:</p><p>usr_sign_up()</p><h5 id="第9步，定义用户注册功能"><a href="#第9步，定义用户注册功能" class="headerlink" title="第9步，定义用户注册功能"></a>第9步，定义用户注册功能</h5><p>def usr_sign_up():</p><p>def sign_to_Hongwei_Website():</p><h5 id="以下三行就是获取我们注册时所输入的信息"><a href="#以下三行就是获取我们注册时所输入的信息" class="headerlink" title="以下三行就是获取我们注册时所输入的信息"></a>以下三行就是获取我们注册时所输入的信息</h5><p>np = new_pwd.get()</p><p>npf = new_pwd_confirm.get()</p><p>nn = new_name.get()</p><h5 id="这里是打开我们记录数据的文件，将注册信息读出"><a href="#这里是打开我们记录数据的文件，将注册信息读出" class="headerlink" title="这里是打开我们记录数据的文件，将注册信息读出"></a>这里是打开我们记录数据的文件，将注册信息读出</h5><p>with open(‘usrs_info.pickle’, ‘rb’) as usr_file:</p><p>exist_usr_info = pickle.load(usr_file)</p><h5 id="这里就是判断，如果两次密码输入不一致，则提示Error-Password-and-confirm-password-must-be-the-same"><a href="#这里就是判断，如果两次密码输入不一致，则提示Error-Password-and-confirm-password-must-be-the-same" class="headerlink" title="这里就是判断，如果两次密码输入不一致，则提示Error, Password and confirm password must be the same!"></a>这里就是判断，如果两次密码输入不一致，则提示Error, Password and confirm password must be the same!</h5><p>if np != npf:</p><p>tkinter.messagebox.showerror(‘Error’, ‘Password and confirm password must be the same!’)</p><h5 id="如果用户名已经在我们的数据文件中，则提示Error-The-user-has-already-signed-up"><a href="#如果用户名已经在我们的数据文件中，则提示Error-The-user-has-already-signed-up" class="headerlink" title="如果用户名已经在我们的数据文件中，则提示Error, The user has already signed up!"></a>如果用户名已经在我们的数据文件中，则提示Error, The user has already signed up!</h5><p>elif nn in exist_usr_info:</p><p>tkinter.messagebox.showerror(‘Error’, ‘The user has already signed up!’)</p><h5 id="最后如果输入无以上错误，则将注册输入的信息记录到文件当中，并提示注册成功Welcome！-You-have-successfully-signed-up-，然后销毁窗口。"><a href="#最后如果输入无以上错误，则将注册输入的信息记录到文件当中，并提示注册成功Welcome！-You-have-successfully-signed-up-，然后销毁窗口。" class="headerlink" title="最后如果输入无以上错误，则将注册输入的信息记录到文件当中，并提示注册成功Welcome！,You have successfully signed up!，然后销毁窗口。"></a>最后如果输入无以上错误，则将注册输入的信息记录到文件当中，并提示注册成功Welcome！,You have successfully signed up!，然后销毁窗口。</h5><p>else:</p><p>exist_usr_info[nn] = np</p><p>with open(‘usrs_info.pickle’, ‘wb’) as usr_file:</p><p>pickle.dump(exist_usr_info, usr_file)</p><p>tkinter.messagebox.showinfo(‘Welcome’, ‘You have successfully signed up!’)</p><h5 id="然后销毁窗口。"><a href="#然后销毁窗口。" class="headerlink" title="然后销毁窗口。"></a>然后销毁窗口。</h5><p>window_sign_up.destroy()</p><h5 id="定义长在窗口上的窗口"><a href="#定义长在窗口上的窗口" class="headerlink" title="定义长在窗口上的窗口"></a>定义长在窗口上的窗口</h5><p>window_sign_up = tk.Toplevel(window)</p><p>window_sign_up.geometry(‘300x200’)</p><p>window_sign_up.title(‘Sign up window’)</p><p>new_name = tk.StringVar() # 将输入的注册名赋值给变量</p><p>new_name.set(‘example@python.com’) # 将最初显示定为‘example@python.com’</p><p>tk.Label(window_sign_up, text=’User name: ‘).place(x=10, y=10) # 将<code>User name:</code>放置在坐标(10,10)。</p><p>entry_new_name = tk.Entry(window_sign_up, textvariable=new_name) # 创建一个注册名的<code>entry</code>，变量为<code>new_name</code></p><p>entry_new_name.place(x=130, y=10) # <code>entry</code>放置在坐标(150,10).</p><p>new_pwd = tk.StringVar()</p><p>tk.Label(window_sign_up, text=’Password: ‘).place(x=10, y=50)</p><p>entry_usr_pwd = tk.Entry(window_sign_up, textvariable=new_pwd, show=’*’)</p><p>entry_usr_pwd.place(x=130, y=50)</p><p>new_pwd_confirm = tk.StringVar()</p><p>tk.Label(window_sign_up, text=’Confirm password: ‘).place(x=10, y=90)</p><p>entry_usr_pwd_confirm = tk.Entry(window_sign_up, textvariable=new_pwd_confirm, show=’*’)</p><p>entry_usr_pwd_confirm.place(x=130, y=90)</p><h5 id="下面的-sign-to-Hongwei-Website"><a href="#下面的-sign-to-Hongwei-Website" class="headerlink" title="下面的 sign_to_Hongwei_Website"></a>下面的 sign_to_Hongwei_Website</h5><p>btn_comfirm_sign_up = tk.Button(window_sign_up, text=’Sign up’, command=sign_to_Hongwei_Website)</p><p>btn_comfirm_sign_up.place(x=180, y=120)</p><h5 id="第7步，login-and-sign-up-按钮"><a href="#第7步，login-and-sign-up-按钮" class="headerlink" title="第7步，login and sign up 按钮"></a>第7步，login and sign up 按钮</h5><p>btn_login = tk.Button(window, text=’Login’, command=usr_login)</p><p>btn_login.place(x=120, y=240)</p><p>btn_sign_up = tk.Button(window, text=’Sign up’, command=usr_sign_up)</p><p>btn_sign_up.place(x=200, y=240)</p><h5 id="第10步，主窗口循环显示"><a href="#第10步，主窗口循环显示" class="headerlink" title="第10步，主窗口循环显示"></a>第10步，主窗口循环显示</h5><p>window.mainloop()</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Tkinter 是使用 python 进行窗口视窗设计的模块。Tkinter模块(“Tk 接口”)是Python的标准Tk GUI工具包的接口。作为 python 特定的GUI界面，是一个图像的窗口，tkinter是python 自带的，可以编辑的GUI界面，我们可以用GU</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Electron前四章回顾</title>
    <link href="http://example.com/2021/01/02/Electron%E5%89%8D4%E7%AB%A0%E5%9B%9E%E9%A1%BE%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/01/02/Electron%E5%89%8D4%E7%AB%A0%E5%9B%9E%E9%A1%BE%E6%80%BB%E7%BB%93/</id>
    <published>2021-01-02T09:59:13.559Z</published>
    <updated>2021-01-02T14:56:51.037Z</updated>
    
    <content type="html"><![CDATA[<p>基于《Electron项目从入门到实战》</p><h1 id="回顾总结"><a href="#回顾总结" class="headerlink" title="回顾总结"></a>回顾总结</h1><h4 id="Electron-实战前四章总结"><a href="#Electron-实战前四章总结" class="headerlink" title="Electron 实战前四章总结"></a>Electron 实战前四章总结</h4><ul><li>Electron可以同时运行在Window，Linux，Mac</li><li>Electron基于web技术开发桌面应用</li><li>对于音视频编码或图像处理需求，可使用Node.js的C++扩展完成</li><li>对系统API进行封装以弥补Node.js和前端技术访问系统API的不足<h3 id="搭建开发环境-只是第一次做。后续不需要"><a href="#搭建开发环境-只是第一次做。后续不需要" class="headerlink" title="搭建开发环境[^只是第一次做。后续不需要]"></a>搭建开发环境[^只是第一次做。后续不需要]</h3><h4 id="安装yarn"><a href="#安装yarn" class="headerlink" title="安装yarn"></a>安装yarn</h4>yarn npm[^系统自带]都是依赖包管理工具<h5 id="首先用功能较好的yarn代替npm"><a href="#首先用功能较好的yarn代替npm" class="headerlink" title="首先用功能较好的yarn代替npm"></a>首先用功能较好的yarn代替npm</h5><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></tbody></table></figure><h4 id="创建node-js项目"><a href="#创建node-js项目" class="headerlink" title="创建node.js项目"></a>创建node.js项目</h4><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn init</span><br></pre></td></tr></tbody></table></figure>此时项目下会生成package.json，是项目的配置文件内容如下<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line"><span class="string">"name"</span>:<span class="string">"chapter1"</span>,</span><br><span class="line"><span class="string">"version"</span>:<span class="string">"1.0.0"</span>,</span><br><span class="line"><span class="string">"main"</span>:<span class="string">"index.js"</span>,</span><br><span class="line"><span class="string">"license"</span>:<span class="string">"MIT"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h5 id="安装electron依赖包-增加node-modules目录，内含项目运行时依赖的node-js包，electron依赖包"><a href="#安装electron依赖包-增加node-modules目录，内含项目运行时依赖的node-js包，electron依赖包" class="headerlink" title="安装electron依赖包[^增加node_modules目录，内含项目运行时依赖的node.js包，electron依赖包]"></a>安装electron依赖包[^增加node_modules目录，内含项目运行时依赖的node.js包，electron依赖包]</h5><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> electron_mirrorhttps://npm.taobao.org/mirrors/electron/ </span><br></pre></td></tr></tbody></table></figure><p>此时设置环境变量，yarn—&gt;path</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add electron --dev --platform=win64</span><br></pre></td></tr></tbody></table></figure><p>关于dev:对应electron模块只用于开发<br>这时package.json增加下面内容[^关于^的意义见书中]</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"devDependencies":{"electron":"^<span class="number">8</span>.<span class="number">1</span>.<span class="number">0</span>"}</span><br></pre></td></tr></tbody></table></figure><h5 id="使用electron依赖包"><a href="#使用electron依赖包" class="headerlink" title="使用electron依赖包"></a>使用electron依赖包</h5><p>在package.json中增加scripts字节</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"scripts":{"start":"electron ./index.js"}</span><br></pre></td></tr></tbody></table></figure><h3 id="创建窗口界面"><a href="#创建窗口界面" class="headerlink" title="创建窗口界面"></a>创建窗口界面</h3><h4 id="创建index-html"><a href="#创建index-html" class="headerlink" title="创建index.html"></a>创建index.html</h4><p>在根目录下建立html5文件</p><h3 id="启动窗口"><a href="#启动窗口" class="headerlink" title="启动窗口"></a>启动窗口</h3><h4 id="创建主进程"><a href="#创建主进程" class="headerlink" title="创建主进程"></a>创建主进程</h4><p>在根目录下创立主进程文件index.js或者main.js</p><h6 id="此时为页面集成node-js-也使html可以访问node-js-主进程中的app里"><a href="#此时为页面集成node-js-也使html可以访问node-js-主进程中的app里" class="headerlink" title="此时为页面集成node.js,也使html可以访问node.js[^主进程中的app里]"></a>此时为页面集成node.js,也使html可以访问node.js[^主进程中的app里]</h6><p>app代表整个应用，通过此可以获取应用程序周期中各个事件</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webPreferences:{nodeintegration:true}</span><br></pre></td></tr></tbody></table></figure><h3 id="引用js"><a href="#引用js" class="headerlink" title="引用js"></a>引用js</h3><p>但是在每一个.js里都要引用本.js里所需要的模块，而后用require(“用到的模块 “)引用</p><h4 id="页面方式"><a href="#页面方式" class="headerlink" title="页面方式"></a>页面方式</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"  "</span>&gt;</span> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="node-js方式"><a href="#node-js方式" class="headerlink" title="node.js方式"></a>node.js方式</h4><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let xxx =require('  ')</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;基于《Electron项目从入门到实战》&lt;/p&gt;
&lt;h1 id=&quot;回顾总结&quot;&gt;&lt;a href=&quot;#回顾总结&quot; class=&quot;headerlink&quot; title=&quot;回顾总结&quot;&gt;&lt;/a&gt;回顾总结&lt;/h1&gt;&lt;h4 id=&quot;Electron-实战前四章总结&quot;&gt;&lt;a href=&quot;#E</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Electron手动搭建项目</title>
    <link href="http://example.com/2021/01/02/%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BAelecctron%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2021/01/02/%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BAelecctron%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-01-02T03:11:09.000Z</published>
    <updated>2021-01-02T14:57:21.274Z</updated>
    
    <content type="html"><![CDATA[<p>入门式跨平台桌面应用开发</p><h2 id="手动搭建Electron项目"><a href="#手动搭建Electron项目" class="headerlink" title="手动搭建Electron项目"></a>手动搭建Electron项目</h2><h5 id="首先文件夹里新建生成渲染进程-index-html-使用命令："><a href="#首先文件夹里新建生成渲染进程-index-html-使用命令：" class="headerlink" title="首先文件夹里新建生成渲染进程 index.html,使用命令："></a>首先文件夹里新建生成渲染进程 index.html,使用命令：</h5><p>输入 html:5回车<br>在&lt;body&gt; &lt;/body&gt;里写入想要的内容</p><h5 id="其次新建主进程main-js文件，在此项目目录中打开cmd-输入命令"><a href="#其次新建主进程main-js文件，在此项目目录中打开cmd-输入命令" class="headerlink" title="其次新建主进程main.js文件，在此项目目录中打开cmd,输入命令"></a>其次新建主进程main.js文件，在此项目目录中打开cmd,输入命令</h5><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init --yes</span><br></pre></td></tr></tbody></table></figure><p>由此生成package.json文件，注意此时json的入口要与主进程一致，因此最后生成json文件，正确入口如下：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"main"</span>: <span class="string">"main.js"</span></span><br></pre></td></tr></tbody></table></figure><h5 id="新建一个-css文件。例如-base-css-在css中可改写信息参数如颜色等，注意此时要在-html中引入link模块以关联到-css。如下"><a href="#新建一个-css文件。例如-base-css-在css中可改写信息参数如颜色等，注意此时要在-html中引入link模块以关联到-css。如下" class="headerlink" title="新建一个.css文件。例如 base.css,在css中可改写信息参数如颜色等，注意此时要在.html中引入link模块以关联到.css。如下"></a>新建一个.css文件。例如 base.css,在css中可改写信息参数如颜色等，注意此时要在.html中引入link模块以关联到.css。如下</h5><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"index.css"</span>&gt;</span><span class="comment">&lt;!----关联引用index.css文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a electron item<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="在main-js里写命令时，为方便书写提示，可在下方的终端窗口再次安装electron，虽然全局已经安装过，命令如下："><a href="#在main-js里写命令时，为方便书写提示，可在下方的终端窗口再次安装electron，虽然全局已经安装过，命令如下：" class="headerlink" title="在main.js里写命令时，为方便书写提示，可在下方的终端窗口再次安装electron，虽然全局已经安装过，命令如下："></a>在main.js里写命令时，为方便书写提示，可在下方的终端窗口再次安装electron，虽然全局已经安装过，命令如下：</h5><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i electron --save-dev</span><br></pre></td></tr></tbody></table></figure><h5 id="集成-Eslint"><a href="#集成-Eslint" class="headerlink" title="集成 Eslint:"></a>集成 Eslint:</h5><p>为有代码报错提示在cmd中安装eslint,全局安装，只需要一次，代码是</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g eslint</span><br></pre></td></tr></tbody></table></figure><p>而后在项目中打开cmd输入：</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eslint --init</span><br></pre></td></tr></tbody></table></figure><p>选择默认第二项&gt;To check syntax and find problems,回车选择commonjs,回车选择第三项None of these,回车默认选no,回车选node（也可broswer）,回车默认javascript,回车选择no(也可yes)<br>创建完毕</p><h4 id="关于在渲染进程（-html）中直接使用node-js-主进程（-js）原本就可以调用"><a href="#关于在渲染进程（-html）中直接使用node-js-主进程（-js）原本就可以调用" class="headerlink" title="关于在渲染进程（.html）中直接使用node.js,主进程（.js）原本就可以调用"></a>关于在渲染进程（.html）中直接使用node.js,主进程（.js）原本就可以调用</h4><p>在实例化的window下添加如下命令</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">webPreferences: {</span><br><span class="line">            nodeIntegration: <span class="literal">true</span></span><br><span class="line">        }<span class="comment">//没有集成node的话，require这样的关键字就无法使用</span></span><br></pre></td></tr></tbody></table></figure><h4 id="在渲染进程中添加按钮和文本框："><a href="#在渲染进程中添加按钮和文本框：" class="headerlink" title="在渲染进程中添加按钮和文本框："></a>在渲染进程中添加按钮和文本框：</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>获取随机题库<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"textarea"</span> <span class="attr">cols</span>=<span class="string">"40"</span>  <span class="attr">rows</span>=<span class="string">"20"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./renderer/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!---renderer文件夹下的index.js文件（可替换）---&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>与此同时在index.html中添加能实现按钮，文本框功能的代码。以点击按钮后文本框中显示json文件为例：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs =<span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line">&lt;!--Node.js 文件系统封装在 fs 模块是中，它提供了文件的读取、写入、更名、删除、遍历目录、链接等POSIX 文件系统操作--&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload=<span class="function">()=&gt;</span>{</span><br><span class="line">    <span class="keyword">var</span> btnDom=<span class="built_in">document</span>.querySelector(<span class="string">"#btn"</span>);      &lt;!---获取节点---&gt;</span><br><span class="line">    <span class="keyword">var</span> textareaDom = <span class="built_in">document</span>.querySelector(<span class="string">"#textarea"</span>);</span><br><span class="line"></span><br><span class="line">    btnDom.onclick=<span class="function">()=&gt;</span>{              &lt;!---接听事件---&gt;</span><br><span class="line">        <span class="comment">//alert("确定生成？")</span></span><br><span class="line">        fs.readFile(<span class="string">'package.json'</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>{  &lt;!--接听正误--&gt;</span><br><span class="line">            <span class="keyword">if</span>(err){      &lt;!--判段是否读取错误--&gt;</span><br><span class="line">                <span class="built_in">console</span>.log(err)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">            textareaDom.innerHTML=data</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="使用第三方模块-以MD5为例"><a href="#使用第三方模块-以MD5为例" class="headerlink" title="使用第三方模块 [^以MD5为例]"></a>使用第三方模块 [^以MD5为例]</h4><p><a href="https://www.npmjs.com/">第三方模块库网址</a></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install MD5 --save  <span class="comment">//模块类   保存在Dependencies</span></span><br><span class="line">cnpm install MD5 --save -dev  <span class="comment">//工具类  保存在devDependencies</span></span><br></pre></td></tr></tbody></table></figure><p>在main.js里使用模块，在main.js中添加 const md5=require(“md5”);在createwindow语句下添加console.log(md5(“123456”));注意在主进程中打印的要在当前终端查看<br>在index.js里使用，首先在渲染进程中</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">webPreferences: {</span><br><span class="line">            nodeIntegration: <span class="literal">true</span></span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><p>而后直接在渲染进程中添加 const md5=require(“md5”)，在window,onload中加上console.log(md5(“123456”))；渲染进程中的打印要在运行跳出的窗口中看，在网页源码中</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;入门式跨平台桌面应用开发&lt;/p&gt;
&lt;h2 id=&quot;手动搭建Electron项目&quot;&gt;&lt;a href=&quot;#手动搭建Electron项目&quot; class=&quot;headerlink&quot; title=&quot;手动搭建Electron项目&quot;&gt;&lt;/a&gt;手动搭建Electron项目&lt;/h2&gt;&lt;h5 i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2020/12/06/hello-world/"/>
    <id>http://example.com/2020/12/06/hello-world/</id>
    <published>2020-12-06T01:38:38.885Z</published>
    <updated>2020-12-06T01:38:38.885Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
