<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lamente</title>
  
  <subtitle>Blog</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-02T14:56:51.037Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Lamente</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Electron前四章回顾</title>
    <link href="http://example.com/2021/01/02/Electron%E5%89%8D4%E7%AB%A0%E5%9B%9E%E9%A1%BE%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/01/02/Electron%E5%89%8D4%E7%AB%A0%E5%9B%9E%E9%A1%BE%E6%80%BB%E7%BB%93/</id>
    <published>2021-01-02T09:59:13.559Z</published>
    <updated>2021-01-02T14:56:51.037Z</updated>
    
    <content type="html"><![CDATA[<p>基于《Electron项目从入门到实战》</p><h1 id="回顾总结"><a href="#回顾总结" class="headerlink" title="回顾总结"></a>回顾总结</h1><h4 id="Electron-实战前四章总结"><a href="#Electron-实战前四章总结" class="headerlink" title="Electron 实战前四章总结"></a>Electron 实战前四章总结</h4><ul><li>Electron可以同时运行在Window，Linux，Mac</li><li>Electron基于web技术开发桌面应用</li><li>对于音视频编码或图像处理需求，可使用Node.js的C++扩展完成</li><li>对系统API进行封装以弥补Node.js和前端技术访问系统API的不足<h3 id="搭建开发环境-只是第一次做。后续不需要"><a href="#搭建开发环境-只是第一次做。后续不需要" class="headerlink" title="搭建开发环境[^只是第一次做。后续不需要]"></a>搭建开发环境[^只是第一次做。后续不需要]</h3><h4 id="安装yarn"><a href="#安装yarn" class="headerlink" title="安装yarn"></a>安装yarn</h4>yarn npm[^系统自带]都是依赖包管理工具<h5 id="首先用功能较好的yarn代替npm"><a href="#首先用功能较好的yarn代替npm" class="headerlink" title="首先用功能较好的yarn代替npm"></a>首先用功能较好的yarn代替npm</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure><h4 id="创建node-js项目"><a href="#创建node-js项目" class="headerlink" title="创建node.js项目"></a>创建node.js项目</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn init</span><br></pre></td></tr></table></figure>此时项目下会生成package.json，是项目的配置文件内容如下<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>:<span class="string">&quot;chapter1&quot;</span>,</span><br><span class="line"><span class="string">&quot;version&quot;</span>:<span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;main&quot;</span>:<span class="string">&quot;index.js&quot;</span>,</span><br><span class="line"><span class="string">&quot;license&quot;</span>:<span class="string">&quot;MIT&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="安装electron依赖包-增加node-modules目录，内含项目运行时依赖的node-js包，electron依赖包"><a href="#安装electron依赖包-增加node-modules目录，内含项目运行时依赖的node-js包，electron依赖包" class="headerlink" title="安装electron依赖包[^增加node_modules目录，内含项目运行时依赖的node.js包，electron依赖包]"></a>安装electron依赖包[^增加node_modules目录，内含项目运行时依赖的node.js包，electron依赖包]</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> electron_mirrorhttps://npm.taobao.org/mirrors/electron/ </span><br></pre></td></tr></table></figure><p>此时设置环境变量，yarn—&gt;path</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add electron --dev --platform=win64</span><br></pre></td></tr></table></figure><p>关于dev:对应electron模块只用于开发<br>这时package.json增加下面内容[^关于^的意义见书中]</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;devDependencies&quot;:&#123;&quot;electron&quot;:&quot;^<span class="number">8</span>.<span class="number">1</span>.<span class="number">0</span>&quot;&#125;</span><br></pre></td></tr></table></figure><h5 id="使用electron依赖包"><a href="#使用electron依赖包" class="headerlink" title="使用electron依赖包"></a>使用electron依赖包</h5><p>在package.json中增加scripts字节</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;:&#123;&quot;start&quot;:&quot;electron ./index.js&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="创建窗口界面"><a href="#创建窗口界面" class="headerlink" title="创建窗口界面"></a>创建窗口界面</h3><h4 id="创建index-html"><a href="#创建index-html" class="headerlink" title="创建index.html"></a>创建index.html</h4><p>在根目录下建立html5文件</p><h3 id="启动窗口"><a href="#启动窗口" class="headerlink" title="启动窗口"></a>启动窗口</h3><h4 id="创建主进程"><a href="#创建主进程" class="headerlink" title="创建主进程"></a>创建主进程</h4><p>在根目录下创立主进程文件index.js或者main.js</p><h6 id="此时为页面集成node-js-也使html可以访问node-js-主进程中的app里"><a href="#此时为页面集成node-js-也使html可以访问node-js-主进程中的app里" class="headerlink" title="此时为页面集成node.js,也使html可以访问node.js[^主进程中的app里]"></a>此时为页面集成node.js,也使html可以访问node.js[^主进程中的app里]</h6><p>app代表整个应用，通过此可以获取应用程序周期中各个事件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webPreferences:&#123;nodeintegration:true&#125;</span><br></pre></td></tr></table></figure><h3 id="引用js"><a href="#引用js" class="headerlink" title="引用js"></a>引用js</h3><p>但是在每一个.js里都要引用本.js里所需要的模块，而后用require(“用到的模块 “)引用</p><h4 id="页面方式"><a href="#页面方式" class="headerlink" title="页面方式"></a>页面方式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;  &quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="node-js方式"><a href="#node-js方式" class="headerlink" title="node.js方式"></a>node.js方式</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let xxx =require(&#x27;  &#x27;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;基于《Electron项目从入门到实战》&lt;/p&gt;
&lt;h1 id=&quot;回顾总结&quot;&gt;&lt;a href=&quot;#回顾总结&quot; class=&quot;headerlink&quot; title=&quot;回顾总结&quot;&gt;&lt;/a&gt;回顾总结&lt;/h1&gt;&lt;h4 id=&quot;Electron-实战前四章总结&quot;&gt;&lt;a href=&quot;#E</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Electron手动搭建项目</title>
    <link href="http://example.com/2021/01/02/%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BAelecctron%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2021/01/02/%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BAelecctron%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-01-02T03:11:09.000Z</published>
    <updated>2021-01-02T14:57:21.274Z</updated>
    
    <content type="html"><![CDATA[<p>入门式跨平台桌面应用开发</p><h2 id="手动搭建Electron项目"><a href="#手动搭建Electron项目" class="headerlink" title="手动搭建Electron项目"></a>手动搭建Electron项目</h2><h5 id="首先文件夹里新建生成渲染进程-index-html-使用命令："><a href="#首先文件夹里新建生成渲染进程-index-html-使用命令：" class="headerlink" title="首先文件夹里新建生成渲染进程 index.html,使用命令："></a>首先文件夹里新建生成渲染进程 index.html,使用命令：</h5><p>输入 html:5回车<br>在&lt;body&gt; &lt;/body&gt;里写入想要的内容</p><h5 id="其次新建主进程main-js文件，在此项目目录中打开cmd-输入命令"><a href="#其次新建主进程main-js文件，在此项目目录中打开cmd-输入命令" class="headerlink" title="其次新建主进程main.js文件，在此项目目录中打开cmd,输入命令"></a>其次新建主进程main.js文件，在此项目目录中打开cmd,输入命令</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init --yes</span><br></pre></td></tr></table></figure><p>由此生成package.json文件，注意此时json的入口要与主进程一致，因此最后生成json文件，正确入口如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;main&quot;</span>: <span class="string">&quot;main.js&quot;</span></span><br></pre></td></tr></table></figure><h5 id="新建一个-css文件。例如-base-css-在css中可改写信息参数如颜色等，注意此时要在-html中引入link模块以关联到-css。如下"><a href="#新建一个-css文件。例如-base-css-在css中可改写信息参数如颜色等，注意此时要在-html中引入link模块以关联到-css。如下" class="headerlink" title="新建一个.css文件。例如 base.css,在css中可改写信息参数如颜色等，注意此时要在.html中引入link模块以关联到.css。如下"></a>新建一个.css文件。例如 base.css,在css中可改写信息参数如颜色等，注意此时要在.html中引入link模块以关联到.css。如下</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;index.css&quot;</span>&gt;</span><span class="comment">&lt;!----关联引用index.css文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a electron item<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="在main-js里写命令时，为方便书写提示，可在下方的终端窗口再次安装electron，虽然全局已经安装过，命令如下："><a href="#在main-js里写命令时，为方便书写提示，可在下方的终端窗口再次安装electron，虽然全局已经安装过，命令如下：" class="headerlink" title="在main.js里写命令时，为方便书写提示，可在下方的终端窗口再次安装electron，虽然全局已经安装过，命令如下："></a>在main.js里写命令时，为方便书写提示，可在下方的终端窗口再次安装electron，虽然全局已经安装过，命令如下：</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i electron --save-dev</span><br></pre></td></tr></table></figure><h5 id="集成-Eslint"><a href="#集成-Eslint" class="headerlink" title="集成 Eslint:"></a>集成 Eslint:</h5><p>为有代码报错提示在cmd中安装eslint,全局安装，只需要一次，代码是</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g eslint</span><br></pre></td></tr></table></figure><p>而后在项目中打开cmd输入：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eslint --init</span><br></pre></td></tr></table></figure><p>选择默认第二项&gt;To check syntax and find problems,回车选择commonjs,回车选择第三项None of these,回车默认选no,回车选node（也可broswer）,回车默认javascript,回车选择no(也可yes)<br>创建完毕</p><h4 id="关于在渲染进程（-html）中直接使用node-js-主进程（-js）原本就可以调用"><a href="#关于在渲染进程（-html）中直接使用node-js-主进程（-js）原本就可以调用" class="headerlink" title="关于在渲染进程（.html）中直接使用node.js,主进程（.js）原本就可以调用"></a>关于在渲染进程（.html）中直接使用node.js,主进程（.js）原本就可以调用</h4><p>在实例化的window下添加如下命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">webPreferences: &#123;</span><br><span class="line">            nodeIntegration: <span class="literal">true</span></span><br><span class="line">        &#125;<span class="comment">//没有集成node的话，require这样的关键字就无法使用</span></span><br></pre></td></tr></table></figure><h4 id="在渲染进程中添加按钮和文本框："><a href="#在渲染进程中添加按钮和文本框：" class="headerlink" title="在渲染进程中添加按钮和文本框："></a>在渲染进程中添加按钮和文本框：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>获取随机题库<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;40&quot;</span>  <span class="attr">rows</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./renderer/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!---renderer文件夹下的index.js文件（可替换）---&gt;</span></span><br></pre></td></tr></table></figure><p>与此同时在index.html中添加能实现按钮，文本框功能的代码。以点击按钮后文本框中显示json文件为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs =<span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line">&lt;!--Node.js 文件系统封装在 fs 模块是中，它提供了文件的读取、写入、更名、删除、遍历目录、链接等POSIX 文件系统操作--&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> btnDom=<span class="built_in">document</span>.querySelector(<span class="string">&quot;#btn&quot;</span>);      &lt;!---获取节点---&gt;</span><br><span class="line">    <span class="keyword">var</span> textareaDom = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#textarea&quot;</span>);</span><br><span class="line"></span><br><span class="line">    btnDom.onclick=<span class="function">()=&gt;</span>&#123;              &lt;!---接听事件---&gt;</span><br><span class="line">        <span class="comment">//alert(&quot;确定生成？&quot;)</span></span><br><span class="line">        fs.readFile(<span class="string">&#x27;package.json&#x27;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;  &lt;!--接听正误--&gt;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;      &lt;!--判段是否读取错误--&gt;</span><br><span class="line">                <span class="built_in">console</span>.log(err)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            textareaDom.innerHTML=data</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用第三方模块-以MD5为例"><a href="#使用第三方模块-以MD5为例" class="headerlink" title="使用第三方模块 [^以MD5为例]"></a>使用第三方模块 [^以MD5为例]</h4><p><a href="https://www.npmjs.com/">第三方模块库网址</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install MD5 --save  <span class="comment">//模块类   保存在Dependencies</span></span><br><span class="line">cnpm install MD5 --save -dev  <span class="comment">//工具类  保存在devDependencies</span></span><br></pre></td></tr></table></figure><p>在main.js里使用模块，在main.js中添加 const md5=require(“md5”);在createwindow语句下添加console.log(md5(“123456”));注意在主进程中打印的要在当前终端查看<br>在index.js里使用，首先在渲染进程中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">webPreferences: &#123;</span><br><span class="line">            nodeIntegration: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>而后直接在渲染进程中添加 const md5=require(“md5”)，在window,onload中加上console.log(md5(“123456”))；渲染进程中的打印要在运行跳出的窗口中看，在网页源码中</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;入门式跨平台桌面应用开发&lt;/p&gt;
&lt;h2 id=&quot;手动搭建Electron项目&quot;&gt;&lt;a href=&quot;#手动搭建Electron项目&quot; class=&quot;headerlink&quot; title=&quot;手动搭建Electron项目&quot;&gt;&lt;/a&gt;手动搭建Electron项目&lt;/h2&gt;&lt;h5 i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2020/12/06/hello-world/"/>
    <id>http://example.com/2020/12/06/hello-world/</id>
    <published>2020-12-06T01:38:38.885Z</published>
    <updated>2020-12-06T01:38:38.885Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
